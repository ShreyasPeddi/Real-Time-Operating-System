
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003900  08003900  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003908  08003908  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000070  08003980  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  200002f8  08003980  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009082  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c68  00000000  00000000  00029122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160a5  00000000  00000000  0002bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7b4  00000000  00000000  00041d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086687  00000000  00000000  0004c539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f8  00000000  00000000  000d2c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080037d8 	.word	0x080037d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080037d8 	.word	0x080037d8

080001d4 <SVC_Handler>:
.global exitSP
.global enterSP
.global SVC_Handler
.thumb_func
SVC_Handler:
	TST lr, #4
 80001d4:	f01e 0f04 	tst.w	lr, #4
	ITE EQ
 80001d8:	bf0c      	ite	eq
	MRSEQ r0, MSP
 80001da:	f3ef 8008 	mrseq	r0, MSP
	MRSNE r0, PSP
 80001de:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main
 80001e2:	f000 bddd 	b.w	8000da0 <SVC_Handler_Main>

080001e6 <ThreadStart>:
.global ThreadStart
.thumb_func
ThreadStart:
	// LDR R0, =stackptr
	LDR R1, [R0]
 80001e6:	6801      	ldr	r1, [r0, #0]
	LDMIA R1!, {R4-R11}
 80001e8:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R1
 80001ec:	f381 8809 	msr	PSP, r1
	MOV LR, #0xFFFFFFFD
 80001f0:	f06f 0e02 	mvn.w	lr, #2
	BX LR
 80001f4:	4770      	bx	lr

080001f6 <handleOSYield>:
.global handleOSYield
.thumb_func
handleOSYield:
	MRS R0, PSP
 80001f6:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!, {R4-R11}
 80001fa:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 80001fe:	f380 8809 	msr	PSP, r0
	BL updateSP
 8000202:	f000 fd91 	bl	8000d28 <updateSP>
	LDR R0, =curr_thread_ptr  // Changed from next_thread_ptr to curr_thread_ptr
 8000206:	4815      	ldr	r0, [pc, #84]	; (800025c <PendSV_Handler+0x18>)
	LDR R1, [R0]
 8000208:	6801      	ldr	r1, [r0, #0]
	LDMIA R1!, {R4-R11}
 800020a:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R1
 800020e:	f381 8809 	msr	PSP, r1
	MOV LR, #0xFFFFFFFD
 8000212:	f06f 0e02 	mvn.w	lr, #2
	BX LR
 8000216:	4770      	bx	lr

08000218 <handleOSStart>:
.global handleOSStart
.thumb_func
handleOSStart:
	LDR R3, =curr_thread_ptr
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <PendSV_Handler+0x18>)
	LDR R2, [R3]
 800021a:	681a      	ldr	r2, [r3, #0]
	LDMIA R2!, {R4-R11}
 800021c:	e8b2 0ff0 	ldmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R2
 8000220:	f382 8809 	msr	PSP, r2
	BL enterSP
 8000224:	f000 fd2e 	bl	8000c84 <enterSP>
	MOV LR, #0xFFFFFFFD
 8000228:	f06f 0e02 	mvn.w	lr, #2
	BX LR
 800022c:	4770      	bx	lr

0800022e <handleOSExit>:
.global handleOSExit
.thumb_func
handleOSExit:
	BL exitSP
 800022e:	f000 fd45 	bl	8000cbc <exitSP>
	LDR R0, =curr_thread_ptr  // Changed from next_thread_ptr to curr_thread_ptr
 8000232:	480a      	ldr	r0, [pc, #40]	; (800025c <PendSV_Handler+0x18>)
	LDR R1, [R0]
 8000234:	6801      	ldr	r1, [r0, #0]
	LDMIA R1!, {R4-R11}
 8000236:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R1
 800023a:	f381 8809 	msr	PSP, r1
	MOV LR, #0xFFFFFFFD
 800023e:	f06f 0e02 	mvn.w	lr, #2
	BX LR
 8000242:	4770      	bx	lr

08000244 <PendSV_Handler>:
.global PendSV_Handler
.thumb_func
PendSV_Handler:
	LDR R0, =svc_number    // address of svc_number
 8000244:	4806      	ldr	r0, [pc, #24]	; (8000260 <PendSV_Handler+0x1c>)
	LDR R0, [R0]           // value of svc_number
 8000246:	6800      	ldr	r0, [r0, #0]
	CMP R0, #1
 8000248:	2801      	cmp	r0, #1
	BEQ handleOSStart      // If svc_number == 1, branch to handleOSStart
 800024a:	f43f afe5 	beq.w	8000218 <handleOSStart>
	CMP R0, #2
 800024e:	2802      	cmp	r0, #2
	BEQ handleOSYield      // If svc_number == 2, branch to handleOSYield
 8000250:	f43f afd1 	beq.w	80001f6 <handleOSYield>
	CMP R0, #3
 8000254:	2803      	cmp	r0, #3
	BEQ handleOSExit       // If svc_number == 3, branch to handleOSExit
 8000256:	f43f afea 	beq.w	800022e <handleOSExit>
 800025a:	0000      	.short	0x0000
	LDR R0, =curr_thread_ptr  // Changed from next_thread_ptr to curr_thread_ptr
 800025c:	2000025c 	.word	0x2000025c
	LDR R0, =svc_number    // address of svc_number
 8000260:	2000026c 	.word	0x2000026c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Task1>:
#include "k_mem.h"

volatile int i_cnt;
volatile int test_i = 0;

void Task1(void *arg) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
   while(1){
     printf("1\r\n");
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <Task1+0x3c>)
 8000572:	f002 fca1 	bl	8002eb8 <puts>
     test_i++;
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <Task1+0x40>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <Task1+0x40>)
 800057e:	6013      	str	r3, [r2, #0]
//     if (test_i == 30) {
//    	 while(1);
//     }
     for (i_cnt = 0; i_cnt < 5000; i_cnt++);
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <Task1+0x44>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e004      	b.n	8000592 <Task1+0x2a>
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <Task1+0x44>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <Task1+0x44>)
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <Task1+0x44>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f241 3287 	movw	r2, #4999	; 0x1387
 800059a:	4293      	cmp	r3, r2
 800059c:	ddf4      	ble.n	8000588 <Task1+0x20>
     osYield();
 800059e:	f000 fb41 	bl	8000c24 <osYield>
     printf("1\r\n");
 80005a2:	e7e5      	b.n	8000570 <Task1+0x8>
 80005a4:	080037f0 	.word	0x080037f0
 80005a8:	20000090 	.word	0x20000090
 80005ac:	2000008c 	.word	0x2000008c

080005b0 <Task2>:
   }
}


void Task2(void *arg) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
   while(1){
     printf("2\r\n");
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <Task2+0x34>)
 80005ba:	f002 fc7d 	bl	8002eb8 <puts>
     for (i_cnt = 0; i_cnt < 5000; i_cnt++);
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <Task2+0x38>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	e004      	b.n	80005d0 <Task2+0x20>
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <Task2+0x38>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <Task2+0x38>)
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <Task2+0x38>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f241 3287 	movw	r2, #4999	; 0x1387
 80005d8:	4293      	cmp	r3, r2
 80005da:	ddf4      	ble.n	80005c6 <Task2+0x16>
     osYield();
 80005dc:	f000 fb22 	bl	8000c24 <osYield>
     printf("2\r\n");
 80005e0:	e7ea      	b.n	80005b8 <Task2+0x8>
 80005e2:	bf00      	nop
 80005e4:	080037f4 	.word	0x080037f4
 80005e8:	2000008c 	.word	0x2000008c

080005ec <Task3>:
   }
}


void Task3(void *arg) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
   while(1){
     printf("3\r\n");
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <Task3+0x34>)
 80005f6:	f002 fc5f 	bl	8002eb8 <puts>
     for (i_cnt = 0; i_cnt < 5000; i_cnt++);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <Task3+0x38>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	e004      	b.n	800060c <Task3+0x20>
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <Task3+0x38>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <Task3+0x38>)
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <Task3+0x38>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f241 3287 	movw	r2, #4999	; 0x1387
 8000614:	4293      	cmp	r3, r2
 8000616:	ddf4      	ble.n	8000602 <Task3+0x16>
     osYield();
 8000618:	f000 fb04 	bl	8000c24 <osYield>
     printf("3\r\n");
 800061c:	e7ea      	b.n	80005f4 <Task3+0x8>
 800061e:	bf00      	nop
 8000620:	080037f8 	.word	0x080037f8
 8000624:	2000008c 	.word	0x2000008c

08000628 <main>:
   }
}

int main(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
    /* MCU Configuration: Don't change this or the whole chip won't work!*/
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800062e:	f001 f853 	bl	80016d8 <HAL_Init>
    /* Configure the system clock */
    SystemClock_Config();
 8000632:	f000 ff1d 	bl	8001470 <SystemClock_Config>
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000636:	f000 ffb1 	bl	800159c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800063a:	f000 ff85 	bl	8001548 <MX_USART2_UART_Init>
    /* MCU Configuration is now complete. Start writing your code below this line */

    printf("Starting RTOS NEW TIME...\r\n");
 800063e:	481a      	ldr	r0, [pc, #104]	; (80006a8 <main+0x80>)
 8000640:	f002 fc3a 	bl	8002eb8 <puts>

    osKernelInit();
 8000644:	f000 f886 	bl	8000754 <osKernelInit>

    TCB st_mytask;
    st_mytask.stack_size = STACK_SIZE;
 8000648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800064c:	827b      	strh	r3, [r7, #18]

    // Create tasks with adequate spacing between each allocation
    st_mytask.ptask = &Task1;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x84>)
 8000650:	607b      	str	r3, [r7, #4]
    if (osCreateTask(&st_mytask) != RTX_OK) {
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f96b 	bl	8000930 <osCreateTask>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d002      	beq.n	8000666 <main+0x3e>
        printf("Failed to create Task1\r\n");
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <main+0x88>)
 8000662:	f002 fc29 	bl	8002eb8 <puts>
    }

    st_mytask.ptask = &Task2;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <main+0x8c>)
 8000668:	607b      	str	r3, [r7, #4]
    if (osCreateTask(&st_mytask) != RTX_OK) {
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f95f 	bl	8000930 <osCreateTask>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d002      	beq.n	800067e <main+0x56>
        printf("Failed to create Task2\r\n");
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <main+0x90>)
 800067a:	f002 fc1d 	bl	8002eb8 <puts>
    }

    st_mytask.ptask = &Task3;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <main+0x94>)
 8000680:	607b      	str	r3, [r7, #4]
    if (osCreateTask(&st_mytask) != RTX_OK) {
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4618      	mov	r0, r3
 8000686:	f000 f953 	bl	8000930 <osCreateTask>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d002      	beq.n	8000696 <main+0x6e>
        printf("Failed to create Task3\r\n");
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <main+0x98>)
 8000692:	f002 fc11 	bl	8002eb8 <puts>
    }

    printf("Starting kernel...\r\n");
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <main+0x9c>)
 8000698:	f002 fc0e 	bl	8002eb8 <puts>
    osKernelStart();
 800069c:	f000 fa76 	bl	8000b8c <osKernelStart>

    printf("back to main\r\n");
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <main+0xa0>)
 80006a2:	f002 fc09 	bl	8002eb8 <puts>
    while (1);
 80006a6:	e7fe      	b.n	80006a6 <main+0x7e>
 80006a8:	080037fc 	.word	0x080037fc
 80006ac:	08000569 	.word	0x08000569
 80006b0:	08003818 	.word	0x08003818
 80006b4:	080005b1 	.word	0x080005b1
 80006b8:	08003830 	.word	0x08003830
 80006bc:	080005ed 	.word	0x080005ed
 80006c0:	08003848 	.word	0x08003848
 80006c4:	08003860 	.word	0x08003860
 80006c8:	08003874 	.word	0x08003874

080006cc <null_task>:
extern uint32_t _Min_Stack_Size;

int kernel_init = 0;
int kernel_running = 0;

void null_task(void*arg) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	while (1) {}
 80006d4:	e7fe      	b.n	80006d4 <null_task+0x8>
	...

080006d8 <getEarliestDeadlineTask>:
}

// EDF
int getEarliestDeadlineTask(void) {
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
    task_t earliest_task = TID_NULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
    uint32_t earliest_deadline = 0xFFFFFFFF; // is this correct???
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	60bb      	str	r3, [r7, #8]

    for (int i = 1; i < MAX_TASKS; i++) {
 80006e8:	2301      	movs	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	e025      	b.n	800073a <getEarliestDeadlineTask+0x62>
        if (task_list[i].state == READY && task_list[i].time_remaining < earliest_deadline) {
 80006ee:	4918      	ldr	r1, [pc, #96]	; (8000750 <getEarliestDeadlineTask+0x78>)
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4613      	mov	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	1a9b      	subs	r3, r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	330c      	adds	r3, #12
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d117      	bne.n	8000734 <getEarliestDeadlineTask+0x5c>
 8000704:	4912      	ldr	r1, [pc, #72]	; (8000750 <getEarliestDeadlineTask+0x78>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	3318      	adds	r3, #24
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	429a      	cmp	r2, r3
 800071a:	d90b      	bls.n	8000734 <getEarliestDeadlineTask+0x5c>
            earliest_deadline = task_list[i].time_remaining;
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <getEarliestDeadlineTask+0x78>)
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4613      	mov	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	440b      	add	r3, r1
 800072a:	3318      	adds	r3, #24
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	60bb      	str	r3, [r7, #8]
            earliest_task = i;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < MAX_TASKS; i++) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	ddd6      	ble.n	80006ee <getEarliestDeadlineTask+0x16>
        }
    }

    return earliest_task;  // will be TID_NULL if no ready tasks found
 8000740:	68fb      	ldr	r3, [r7, #12]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094

08000754 <osKernelInit>:

void osKernelInit(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

    MSP_INIT_VAL = *(uint32_t**)0x0;
 800075a:	2300      	movs	r3, #0
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a6b      	ldr	r2, [pc, #428]	; (800090c <osKernelInit+0x1b8>)
 8000760:	6013      	str	r3, [r2, #0]
    uint32_t* stackptr = (uint32_t)(MSP_INIT_VAL) - MAIN_STACK_SIZE;
 8000762:	4b6a      	ldr	r3, [pc, #424]	; (800090c <osKernelInit+0x1b8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800076a:	60bb      	str	r3, [r7, #8]

    if (kernel_init) { return; }
 800076c:	4b68      	ldr	r3, [pc, #416]	; (8000910 <osKernelInit+0x1bc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f040 80c5 	bne.w	8000900 <osKernelInit+0x1ac>

    kernel_init = 1;
 8000776:	4b66      	ldr	r3, [pc, #408]	; (8000910 <osKernelInit+0x1bc>)
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
    if (k_mem_init() == RTX_ERR) {
 800077c:	f000 fb70 	bl	8000e60 <k_mem_init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d103      	bne.n	800078e <osKernelInit+0x3a>
    	kernel_init = 0;
 8000786:	4b62      	ldr	r3, [pc, #392]	; (8000910 <osKernelInit+0x1bc>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
    	return;
 800078c:	e0bb      	b.n	8000906 <osKernelInit+0x1b2>
    }


    void* stack_mem = k_mem_alloc(MAIN_STACK_SIZE);
 800078e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000792:	f000 fbb7 	bl	8000f04 <k_mem_alloc>
 8000796:	6078      	str	r0, [r7, #4]
    if (stack_mem == NULL) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f000 80b2 	beq.w	8000904 <osKernelInit+0x1b0>
        return RTX_ERR;
    }

    // initialize null task
    task_list[0].ptask = null_task;
 80007a0:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <osKernelInit+0x1c0>)
 80007a2:	4a5d      	ldr	r2, [pc, #372]	; (8000918 <osKernelInit+0x1c4>)
 80007a4:	601a      	str	r2, [r3, #0]
    task_list[0].stack_high = (uint32_t*)((uint32_t)stack_mem + MAIN_STACK_SIZE);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b59      	ldr	r3, [pc, #356]	; (8000914 <osKernelInit+0x1c0>)
 80007b0:	605a      	str	r2, [r3, #4]
    task_list[0].tid = TID_NULL;
 80007b2:	4b58      	ldr	r3, [pc, #352]	; (8000914 <osKernelInit+0x1c0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
    task_list[0].state = RUNNING;
 80007b8:	4b56      	ldr	r3, [pc, #344]	; (8000914 <osKernelInit+0x1c0>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	731a      	strb	r2, [r3, #12]
    task_list[0].stack_size = MAIN_STACK_SIZE;
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <osKernelInit+0x1c0>)
 80007c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c4:	81da      	strh	r2, [r3, #14]
    // ask maran what to put in here
    task_list[0].deadline = 0xFFFFFFFF; // max val???
 80007c6:	4b53      	ldr	r3, [pc, #332]	; (8000914 <osKernelInit+0x1c0>)
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	615a      	str	r2, [r3, #20]
    task_list[0].time_remaining = 0xFFFFFFFF; // max val???
 80007ce:	4b51      	ldr	r3, [pc, #324]	; (8000914 <osKernelInit+0x1c0>)
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	619a      	str	r2, [r3, #24]

    current_TID = TID_NULL;
 80007d6:	4b51      	ldr	r3, [pc, #324]	; (800091c <osKernelInit+0x1c8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]


    uint32_t* stack_location_ptr = (uint32_t*)task_list[0].stack_high;
 80007dc:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <osKernelInit+0x1c0>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	617b      	str	r3, [r7, #20]
    *(--stack_location_ptr) = 1 << 24;  // xPSR (Thumb state)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3b04      	subs	r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007ee:	601a      	str	r2, [r3, #0]
    *(--stack_location_ptr) = (uint32_t)task_list[0].ptask; // PC (entry point)
 80007f0:	4b48      	ldr	r3, [pc, #288]	; (8000914 <osKernelInit+0x1c0>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3b04      	subs	r3, #4
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 14; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	e008      	b.n	8000816 <osKernelInit+0xc2>
        *(--stack_location_ptr) = 0xA;  // General-purpose registers
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3b04      	subs	r3, #4
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	220a      	movs	r2, #10
 800080e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 14; i++) {
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	3301      	adds	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	2b0d      	cmp	r3, #13
 800081a:	ddf3      	ble.n	8000804 <osKernelInit+0xb0>
    }

    task_list[0].thread_psp_ptr = stack_location_ptr;
 800081c:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <osKernelInit+0x1c0>)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	6113      	str	r3, [r2, #16]
    task_count++; // increment task count
 8000822:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <osKernelInit+0x1cc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	4a3d      	ldr	r2, [pc, #244]	; (8000920 <osKernelInit+0x1cc>)
 800082a:	6013      	str	r3, [r2, #0]

    // make all other tasks as DORMANT
    for (int i = 1; i < MAX_TASKS; i++) {
 800082c:	2301      	movs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	e047      	b.n	80008c2 <osKernelInit+0x16e>
        task_list[i].ptask = NULL;
 8000832:	4938      	ldr	r1, [pc, #224]	; (8000914 <osKernelInit+0x1c0>)
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4613      	mov	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
        task_list[i].stack_high = 0x0;
 8000844:	4933      	ldr	r1, [pc, #204]	; (8000914 <osKernelInit+0x1c0>)
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	4613      	mov	r3, r2
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	1a9b      	subs	r3, r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	440b      	add	r3, r1
 8000852:	3304      	adds	r3, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
        task_list[i].tid = TID_NULL;
 8000858:	492e      	ldr	r1, [pc, #184]	; (8000914 <osKernelInit+0x1c0>)
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	4613      	mov	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	3308      	adds	r3, #8
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
        task_list[i].state = DORMANT;
 800086c:	4929      	ldr	r1, [pc, #164]	; (8000914 <osKernelInit+0x1c0>)
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	4613      	mov	r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	330c      	adds	r3, #12
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
        task_list[i].stack_size = 0x0;
 8000880:	4924      	ldr	r1, [pc, #144]	; (8000914 <osKernelInit+0x1c0>)
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	4613      	mov	r3, r2
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	1a9b      	subs	r3, r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	330e      	adds	r3, #14
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
        task_list[i].deadline = 0;
 8000894:	491f      	ldr	r1, [pc, #124]	; (8000914 <osKernelInit+0x1c0>)
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	4613      	mov	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	1a9b      	subs	r3, r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	3314      	adds	r3, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
        task_list[i].time_remaining = 0;
 80008a8:	491a      	ldr	r1, [pc, #104]	; (8000914 <osKernelInit+0x1c0>)
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	3318      	adds	r3, #24
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
    for (int i = 1; i < MAX_TASKS; i++) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	ddb4      	ble.n	8000832 <osKernelInit+0xde>
    }

    g_system_time = 0;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <osKernelInit+0x1d0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]

    SHPR3 = (SHPR3 & ~(0xFFU << 24)) | (0xF0U << 24);//SysTick is lowest priority (highest number)
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <osKernelInit+0x1d4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <osKernelInit+0x1d4>)
 80008d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80008dc:	6013      	str	r3, [r2, #0]
    SHPR3 = (SHPR3 & ~(0xFFU << 16)) | (0xE0U << 16);//PendSV is in the middle
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <osKernelInit+0x1d4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <osKernelInit+0x1d4>)
 80008e8:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80008ec:	6013      	str	r3, [r2, #0]
    SHPR2 = (SHPR2 & ~(0xFFU << 24)) | (0xD0U << 24);//SVC is highest priority (lowest number)
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <osKernelInit+0x1d8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008f6:	4a0d      	ldr	r2, [pc, #52]	; (800092c <osKernelInit+0x1d8>)
 80008f8:	f043 4350 	orr.w	r3, r3, #3489660928	; 0xd0000000
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	e002      	b.n	8000906 <osKernelInit+0x1b2>
    if (kernel_init) { return; }
 8000900:	bf00      	nop
 8000902:	e000      	b.n	8000906 <osKernelInit+0x1b2>
        return RTX_ERR;
 8000904:	bf00      	nop
}
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000264 	.word	0x20000264
 8000910:	20000274 	.word	0x20000274
 8000914:	20000094 	.word	0x20000094
 8000918:	080006cd 	.word	0x080006cd
 800091c:	20000254 	.word	0x20000254
 8000920:	20000268 	.word	0x20000268
 8000924:	20000270 	.word	0x20000270
 8000928:	e000ed20 	.word	0xe000ed20
 800092c:	e000ed1c 	.word	0xe000ed1c

08000930 <osCreateTask>:

int osCreateTask(TCB* task) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    // just do osCreateDeadlineTask(5, task)
    return osCreateDeadlineTask(5, task);
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	2005      	movs	r0, #5
 800093c:	f000 f806 	bl	800094c <osCreateDeadlineTask>
 8000940:	4603      	mov	r3, r0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <osCreateDeadlineTask>:


task_t new_TID = TID_NULL;
int osCreateDeadlineTask(int deadline, TCB* task) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]

    // Check if deadline is valid
    if (deadline <= 0) {
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	dc01      	bgt.n	8000960 <osCreateDeadlineTask+0x14>
        return RTX_ERR;
 800095c:	2300      	movs	r3, #0
 800095e:	e100      	b.n	8000b62 <osCreateDeadlineTask+0x216>
    }

    // check if task is NULL, stack size is less than minimum, or task count is at max
    if (task == NULL || task->stack_size < STACK_SIZE || task_count >= MAX_TASKS) {
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d008      	beq.n	8000978 <osCreateDeadlineTask+0x2c>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	89db      	ldrh	r3, [r3, #14]
 800096a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800096e:	d303      	bcc.n	8000978 <osCreateDeadlineTask+0x2c>
 8000970:	4b7e      	ldr	r3, [pc, #504]	; (8000b6c <osCreateDeadlineTask+0x220>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d901      	bls.n	800097c <osCreateDeadlineTask+0x30>
        return RTX_ERR;
 8000978:	2300      	movs	r3, #0
 800097a:	e0f2      	b.n	8000b62 <osCreateDeadlineTask+0x216>
    }

    // find free task ID
    for (int i = 1; i < MAX_TASKS; i++) {
 800097c:	2301      	movs	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e011      	b.n	80009a6 <osCreateDeadlineTask+0x5a>
        if (task_list[i].state == DORMANT) {
 8000982:	497b      	ldr	r1, [pc, #492]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	4613      	mov	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	1a9b      	subs	r3, r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	440b      	add	r3, r1
 8000990:	330c      	adds	r3, #12
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d103      	bne.n	80009a0 <osCreateDeadlineTask+0x54>
            new_TID = i;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	4a76      	ldr	r2, [pc, #472]	; (8000b74 <osCreateDeadlineTask+0x228>)
 800099c:	6013      	str	r3, [r2, #0]
            break;
 800099e:	e005      	b.n	80009ac <osCreateDeadlineTask+0x60>
    for (int i = 1; i < MAX_TASKS; i++) {
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	ddea      	ble.n	8000982 <osCreateDeadlineTask+0x36>
        }
    }


    if (new_TID == TID_NULL) {
 80009ac:	4b71      	ldr	r3, [pc, #452]	; (8000b74 <osCreateDeadlineTask+0x228>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <osCreateDeadlineTask+0x6c>
        return RTX_ERR; // => no free task slots
 80009b4:	2300      	movs	r3, #0
 80009b6:	e0d4      	b.n	8000b62 <osCreateDeadlineTask+0x216>
    }


    void* stack_mem = k_mem_alloc(task->stack_size);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	89db      	ldrh	r3, [r3, #14]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 faa1 	bl	8000f04 <k_mem_alloc>
 80009c2:	60b8      	str	r0, [r7, #8]
    if (stack_mem == NULL) {
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <osCreateDeadlineTask+0x82>
        return RTX_ERR;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e0c9      	b.n	8000b62 <osCreateDeadlineTask+0x216>
    }

    task->tid = new_TID;
 80009ce:	4b69      	ldr	r3, [pc, #420]	; (8000b74 <osCreateDeadlineTask+0x228>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	609a      	str	r2, [r3, #8]
    task->stack_high = (uint32_t*)((uint32_t)stack_mem + task->stack_size);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	89db      	ldrh	r3, [r3, #14]
 80009da:	461a      	mov	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4413      	add	r3, r2
 80009e0:	461a      	mov	r2, r3
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	605a      	str	r2, [r3, #4]
    task_list[new_TID].ptask = task->ptask;
 80009e6:	4b63      	ldr	r3, [pc, #396]	; (8000b74 <osCreateDeadlineTask+0x228>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	6819      	ldr	r1, [r3, #0]
 80009ee:	4860      	ldr	r0, [pc, #384]	; (8000b70 <osCreateDeadlineTask+0x224>)
 80009f0:	4613      	mov	r3, r2
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4403      	add	r3, r0
 80009fa:	6019      	str	r1, [r3, #0]
    task_list[new_TID].stack_high = task->stack_high;
 80009fc:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <osCreateDeadlineTask+0x228>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	6859      	ldr	r1, [r3, #4]
 8000a04:	485a      	ldr	r0, [pc, #360]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000a06:	4613      	mov	r3, r2
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	1a9b      	subs	r3, r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4403      	add	r3, r0
 8000a10:	3304      	adds	r3, #4
 8000a12:	6019      	str	r1, [r3, #0]
    task_list[new_TID].tid = new_TID;
 8000a14:	4b57      	ldr	r3, [pc, #348]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b56      	ldr	r3, [pc, #344]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	4854      	ldr	r0, [pc, #336]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000a1e:	4613      	mov	r3, r2
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	1a9b      	subs	r3, r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4403      	add	r3, r0
 8000a28:	3308      	adds	r3, #8
 8000a2a:	6019      	str	r1, [r3, #0]
    task_list[new_TID].state = READY;
 8000a2c:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	494f      	ldr	r1, [pc, #316]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	330c      	adds	r3, #12
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
    task_list[new_TID].stack_size = task->stack_size;
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	89d8      	ldrh	r0, [r3, #14]
 8000a4a:	4949      	ldr	r1, [pc, #292]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	330e      	adds	r3, #14
 8000a58:	4602      	mov	r2, r0
 8000a5a:	801a      	strh	r2, [r3, #0]
    task_list[new_TID].deadline = deadline;
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	4843      	ldr	r0, [pc, #268]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	1a9b      	subs	r3, r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3314      	adds	r3, #20
 8000a70:	6019      	str	r1, [r3, #0]
    task_list[new_TID].time_remaining = deadline;
 8000a72:	4b40      	ldr	r3, [pc, #256]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	483d      	ldr	r0, [pc, #244]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4403      	add	r3, r0
 8000a84:	3318      	adds	r3, #24
 8000a86:	6019      	str	r1, [r3, #0]

    uint32_t* stack_location_ptr = (uint32_t*)task_list[new_TID].stack_high;
 8000a88:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4938      	ldr	r1, [pc, #224]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	3304      	adds	r3, #4
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	613b      	str	r3, [r7, #16]
    *(--stack_location_ptr) = 1 << 24;  // xPSR (Thumb state)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	3b04      	subs	r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000aaa:	601a      	str	r2, [r3, #0]
    *(--stack_location_ptr) = (uint32_t)task_list[new_TID].ptask; // PC (entry point)
 8000aac:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	492f      	ldr	r1, [pc, #188]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	440b      	add	r3, r1
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	3b04      	subs	r3, #4
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 14; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e008      	b.n	8000ae0 <osCreateDeadlineTask+0x194>
        *(--stack_location_ptr) = 0xA;  // General-purpose registers
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	3b04      	subs	r3, #4
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 14; i++) {
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b0d      	cmp	r3, #13
 8000ae4:	ddf3      	ble.n	8000ace <osCreateDeadlineTask+0x182>
    }

    task_list[new_TID].thread_psp_ptr = stack_location_ptr;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4921      	ldr	r1, [pc, #132]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	3310      	adds	r3, #16
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	601a      	str	r2, [r3, #0]
    task_count++;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <osCreateDeadlineTask+0x220>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <osCreateDeadlineTask+0x220>)
 8000b04:	6013      	str	r3, [r2, #0]

    // TODO new task has an earlier deadline than the current task => context switch
    if (kernel_running && current_TID != TID_NULL &&
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <osCreateDeadlineTask+0x22c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d028      	beq.n	8000b60 <osCreateDeadlineTask+0x214>
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <osCreateDeadlineTask+0x230>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d024      	beq.n	8000b60 <osCreateDeadlineTask+0x214>
        task_list[new_TID].time_remaining < task_list[current_TID].time_remaining) {
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4915      	ldr	r1, [pc, #84]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	1a9b      	subs	r3, r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	3318      	adds	r3, #24
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <osCreateDeadlineTask+0x230>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <osCreateDeadlineTask+0x224>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4403      	add	r3, r0
 8000b3a:	3318      	adds	r3, #24
 8000b3c:	681b      	ldr	r3, [r3, #0]
    if (kernel_running && current_TID != TID_NULL &&
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d20e      	bcs.n	8000b60 <osCreateDeadlineTask+0x214>

		next_TID = new_TID;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <osCreateDeadlineTask+0x228>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <osCreateDeadlineTask+0x234>)
 8000b48:	6013      	str	r3, [r2, #0]

		svc_number = 2;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <osCreateDeadlineTask+0x238>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	601a      	str	r2, [r3, #0]
		// need to osYield on current task
		// trigger context switch => osYield
		SCB->ICSR |= (0x1 << 28);
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <osCreateDeadlineTask+0x23c>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <osCreateDeadlineTask+0x23c>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	6053      	str	r3, [r2, #4]
		__asm("isb");
 8000b5c:	f3bf 8f6f 	isb	sy

    }


    return RTX_OK;
 8000b60:	2301      	movs	r3, #1
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000268 	.word	0x20000268
 8000b70:	20000094 	.word	0x20000094
 8000b74:	2000027c 	.word	0x2000027c
 8000b78:	20000278 	.word	0x20000278
 8000b7c:	20000254 	.word	0x20000254
 8000b80:	20000258 	.word	0x20000258
 8000b84:	2000026c 	.word	0x2000026c
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <osKernelStart>:

int osKernelStart(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
    if (!kernel_init || kernel_running) {
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <osKernelStart+0x7c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <osKernelStart+0x16>
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <osKernelStart+0x80>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <osKernelStart+0x1a>
        return RTX_ERR;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e02c      	b.n	8000c00 <osKernelStart+0x74>
    }

    // reset system time
    g_system_time = 0;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <osKernelStart+0x84>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]

    task_t first_task = getEarliestDeadlineTask();
 8000bac:	f7ff fd94 	bl	80006d8 <getEarliestDeadlineTask>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	607b      	str	r3, [r7, #4]

    // set the first task to running
    current_TID = first_task;
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <osKernelStart+0x88>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
    task_list[current_TID].state = RUNNING;
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <osKernelStart+0x88>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4916      	ldr	r1, [pc, #88]	; (8000c18 <osKernelStart+0x8c>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	1a9b      	subs	r3, r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	440b      	add	r3, r1
 8000bca:	330c      	adds	r3, #12
 8000bcc:	2202      	movs	r2, #2
 8000bce:	701a      	strb	r2, [r3, #0]
    kernel_running = 1;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <osKernelStart+0x80>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]


    if (current_TID != TID_NULL) { // if the first task is not the null task, then we need to load the PSP
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <osKernelStart+0x88>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00f      	beq.n	8000bfe <osKernelStart+0x72>
        curr_thread_ptr = task_list[current_TID].thread_psp_ptr;
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <osKernelStart+0x88>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <osKernelStart+0x8c>)
 8000be4:	4613      	mov	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	3310      	adds	r3, #16
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <osKernelStart+0x90>)
 8000bf4:	6013      	str	r3, [r2, #0]
        next_thread_ptr = 0;
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <osKernelStart+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
        // handleOSStart
        __asm("SVC #1");
 8000bfc:	df01      	svc	1
    }

    return RTX_OK;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000274 	.word	0x20000274
 8000c0c:	20000278 	.word	0x20000278
 8000c10:	20000270 	.word	0x20000270
 8000c14:	20000254 	.word	0x20000254
 8000c18:	20000094 	.word	0x20000094
 8000c1c:	2000025c 	.word	0x2000025c
 8000c20:	20000260 	.word	0x20000260

08000c24 <osYield>:

void osYield(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    // reset time_remaining to deadline
    task_list[current_TID].time_remaining = task_list[current_TID].deadline;
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <osYield+0x54>)
 8000c2a:	6819      	ldr	r1, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <osYield+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4812      	ldr	r0, [pc, #72]	; (8000c7c <osYield+0x58>)
 8000c32:	460b      	mov	r3, r1
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	1a5b      	subs	r3, r3, r1
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4403      	add	r3, r0
 8000c3c:	3314      	adds	r3, #20
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	480e      	ldr	r0, [pc, #56]	; (8000c7c <osYield+0x58>)
 8000c42:	4613      	mov	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4403      	add	r3, r0
 8000c4c:	3318      	adds	r3, #24
 8000c4e:	6019      	str	r1, [r3, #0]

    next_TID = getEarliestDeadlineTask();
 8000c50:	f7ff fd42 	bl	80006d8 <getEarliestDeadlineTask>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <osYield+0x5c>)
 8000c5a:	601a      	str	r2, [r3, #0]

    task_list[current_TID].state = READY;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <osYield+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4906      	ldr	r1, [pc, #24]	; (8000c7c <osYield+0x58>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	330c      	adds	r3, #12
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]

    // handleOSYield
    __asm("SVC #2");
 8000c72:	df02      	svc	2
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000254 	.word	0x20000254
 8000c7c:	20000094 	.word	0x20000094
 8000c80:	20000258 	.word	0x20000258

08000c84 <enterSP>:
    return RTX_OK;
}


// on first task (osKernelStart)
void enterSP(void) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000c8a:	f3ef 8309 	mrs	r3, PSP
 8000c8e:	607b      	str	r3, [r7, #4]
  return(result);
 8000c90:	6879      	ldr	r1, [r7, #4]
    task_list[current_TID].thread_psp_ptr = __get_PSP(); // save the PSP of the current task
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <enterSP+0x30>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4608      	mov	r0, r1
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <enterSP+0x34>)
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	6018      	str	r0, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	20000254 	.word	0x20000254
 8000cb8:	20000094 	.word	0x20000094

08000cbc <exitSP>:

// on last task (osExit)
void exitSP(void) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	if (current_TID != next_TID) {
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <exitSP+0x58>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <exitSP+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d01e      	beq.n	8000d0a <exitSP+0x4e>
		// save the PSP of the current task and set the next task to running
		// set the current task to dormant
	    task_list[current_TID].state = DORMANT;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <exitSP+0x58>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4912      	ldr	r1, [pc, #72]	; (8000d1c <exitSP+0x60>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	440b      	add	r3, r1
 8000cdc:	330c      	adds	r3, #12
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		next_thread_ptr = task_list[next_TID].thread_psp_ptr;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <exitSP+0x5c>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	490d      	ldr	r1, [pc, #52]	; (8000d1c <exitSP+0x60>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	3310      	adds	r3, #16
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <exitSP+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]
		current_TID = next_TID;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <exitSP+0x5c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <exitSP+0x58>)
 8000d00:	6013      	str	r3, [r2, #0]
		curr_thread_ptr = next_thread_ptr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <exitSP+0x64>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <exitSP+0x68>)
 8000d08:	6013      	str	r3, [r2, #0]
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	20000254 	.word	0x20000254
 8000d18:	20000258 	.word	0x20000258
 8000d1c:	20000094 	.word	0x20000094
 8000d20:	20000260 	.word	0x20000260
 8000d24:	2000025c 	.word	0x2000025c

08000d28 <updateSP>:

void updateSP(void) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
	if (current_TID != next_TID) {
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <updateSP+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <updateSP+0x68>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d022      	beq.n	8000d80 <updateSP+0x58>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000d3a:	f3ef 8309 	mrs	r3, PSP
 8000d3e:	607b      	str	r3, [r7, #4]
  return(result);
 8000d40:	6879      	ldr	r1, [r7, #4]
//		task_list[current_TID].state = READY;
		task_list[current_TID].thread_psp_ptr = __get_PSP();
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <updateSP+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4608      	mov	r0, r1
 8000d48:	4912      	ldr	r1, [pc, #72]	; (8000d94 <updateSP+0x6c>)
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	3310      	adds	r3, #16
 8000d56:	6018      	str	r0, [r3, #0]

		// in handleOSYield, we need to load this address into our PSP
		next_thread_ptr = task_list[next_TID].thread_psp_ptr;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <updateSP+0x68>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	490d      	ldr	r1, [pc, #52]	; (8000d94 <updateSP+0x6c>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	3310      	adds	r3, #16
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <updateSP+0x70>)
 8000d6e:	6013      	str	r3, [r2, #0]
		current_TID = next_TID;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <updateSP+0x68>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <updateSP+0x64>)
 8000d76:	6013      	str	r3, [r2, #0]
		curr_thread_ptr = next_thread_ptr;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <updateSP+0x70>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <updateSP+0x74>)
 8000d7e:	6013      	str	r3, [r2, #0]
	}
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20000254 	.word	0x20000254
 8000d90:	20000258 	.word	0x20000258
 8000d94:	20000094 	.word	0x20000094
 8000d98:	20000260 	.word	0x20000260
 8000d9c:	2000025c 	.word	0x2000025c

08000da0 <SVC_Handler_Main>:
    return current_TID;
}


void SVC_Handler_Main(unsigned int *svc_args)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    svc_number = ((char*)svc_args[6])[-2];
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3318      	adds	r3, #24
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3b02      	subs	r3, #2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <SVC_Handler_Main+0xac>)
 8000db6:	601a      	str	r2, [r3, #0]
    switch(svc_number)
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <SVC_Handler_Main+0xac>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d83e      	bhi.n	8000e3e <SVC_Handler_Main+0x9e>
 8000dc0:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <SVC_Handler_Main+0x28>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000dd9 	.word	0x08000dd9
 8000dcc:	08000df1 	.word	0x08000df1
 8000dd0:	08000e1b 	.word	0x08000e1b
 8000dd4:	08000e2d 	.word	0x08000e2d
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000dd8:	f3ef 8314 	mrs	r3, CONTROL
 8000ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8000dde:	68bb      	ldr	r3, [r7, #8]
    {
        case 0:  /* EnablePrivilegedMode */
            __set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk);
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f383 8814 	msr	CONTROL, r3
}
 8000dec:	bf00      	nop
            break;
 8000dee:	e027      	b.n	8000e40 <SVC_Handler_Main+0xa0>
        case 1: /* handleOSStart */
            curr_thread_ptr = task_list[current_TID].thread_psp_ptr;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <SVC_Handler_Main+0xb0>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4917      	ldr	r1, [pc, #92]	; (8000e54 <SVC_Handler_Main+0xb4>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	440b      	add	r3, r1
 8000e00:	3310      	adds	r3, #16
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <SVC_Handler_Main+0xb8>)
 8000e06:	6013      	str	r3, [r2, #0]
            SCB->ICSR |= (0x1 << 28);
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <SVC_Handler_Main+0xbc>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <SVC_Handler_Main+0xbc>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e12:	6053      	str	r3, [r2, #4]
            __asm("isb");
 8000e14:	f3bf 8f6f 	isb	sy
            break;
 8000e18:	e012      	b.n	8000e40 <SVC_Handler_Main+0xa0>
        case 2: /* handleOSYield */
            SCB->ICSR |= (0x1 << 28);
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <SVC_Handler_Main+0xbc>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <SVC_Handler_Main+0xbc>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6053      	str	r3, [r2, #4]
            __asm("isb");
 8000e26:	f3bf 8f6f 	isb	sy
            break;
 8000e2a:	e009      	b.n	8000e40 <SVC_Handler_Main+0xa0>
        case 3: /* handleOSExit */
            SCB->ICSR |= (0x1 << 28);
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <SVC_Handler_Main+0xbc>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SVC_Handler_Main+0xbc>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6053      	str	r3, [r2, #4]
            __asm("isb");
 8000e38:	f3bf 8f6f 	isb	sy
            break;
 8000e3c:	e000      	b.n	8000e40 <SVC_Handler_Main+0xa0>
        default:    /* unknown SVC */
            break;
 8000e3e:	bf00      	nop
    }
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	2000026c 	.word	0x2000026c
 8000e50:	20000254 	.word	0x20000254
 8000e54:	20000094 	.word	0x20000094
 8000e58:	2000025c 	.word	0x2000025c
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <k_mem_init>:
static uint32_t* heap_end = NULL;


static uint32_t align_to_word(uint32_t size);

int k_mem_init(void) {
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
//	int x = sizeof(MEM_BLOCK);
    if (mem_initialized || !kernel_init) {
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <k_mem_init+0x84>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d103      	bne.n	8000e74 <k_mem_init+0x14>
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <k_mem_init+0x88>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <k_mem_init+0x18>
        return RTX_ERR;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e030      	b.n	8000eda <k_mem_init+0x7a>
    }

    // heap bounds fr
    heap_start = (uint32_t*)&_img_end;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <k_mem_init+0x8c>)
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <k_mem_init+0x90>)
 8000e7c:	601a      	str	r2, [r3, #0]
    heap_end = (uint32_t*)((uint32_t)&_estack - (uint32_t)&_Min_Stack_Size);
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <k_mem_init+0x94>)
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <k_mem_init+0x98>)
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <k_mem_init+0x9c>)
 8000e88:	601a      	str	r2, [r3, #0]

    // first block covers the ENTIRE HEAP
    free_list = (MEM_BLOCK*)heap_start;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <k_mem_init+0x8c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <k_mem_init+0xa0>)
 8000e90:	6013      	str	r3, [r2, #0]
    free_list->size = (uint32_t)heap_end - (uint32_t)heap_start - MEM_BLOCK_SIZE;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <k_mem_init+0x9c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <k_mem_init+0x8c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	1ad2      	subs	r2, r2, r3
 8000e9e:	2118      	movs	r1, #24
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <k_mem_init+0xa0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1a52      	subs	r2, r2, r1
 8000ea6:	615a      	str	r2, [r3, #20]
    free_list->owner = TID_NULL;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <k_mem_init+0xa0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
    free_list->allocated = 0;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <k_mem_init+0xa0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	711a      	strb	r2, [r3, #4]
    free_list->next = NULL;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <k_mem_init+0xa0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
    free_list->prev = NULL;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <k_mem_init+0xa0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    free_list->start_location = free_list;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <k_mem_init+0xa0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <k_mem_init+0xa0>)
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	611a      	str	r2, [r3, #16]

    mem_initialized = 1;
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <k_mem_init+0x84>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
    return RTX_OK;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000280 	.word	0x20000280
 8000ee8:	20000274 	.word	0x20000274
 8000eec:	20000288 	.word	0x20000288
 8000ef0:	200082f8 	.word	0x200082f8
 8000ef4:	20018000 	.word	0x20018000
 8000ef8:	00004000 	.word	0x00004000
 8000efc:	2000028c 	.word	0x2000028c
 8000f00:	20000284 	.word	0x20000284

08000f04 <k_mem_alloc>:


static MEM_BLOCK* last_alloc = NULL;
static uint32_t alloc_min_size = 0;
// Next fit???? ("citcular" first fit)
void* k_mem_alloc(unsigned int size) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    if (!mem_initialized || size == 0) {
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <k_mem_alloc+0x134>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <k_mem_alloc+0x16>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <k_mem_alloc+0x1a>
        return NULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e087      	b.n	800102e <k_mem_alloc+0x12a>
    }

    uint32_t aligned_size = align_to_word(size);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f894 	bl	800104c <align_to_word>
 8000f24:	61b8      	str	r0, [r7, #24]

//    MEM_BLOCK* start = last_alloc && (last_alloc->size <= aligned_size) ? last_alloc->next : free_list;
    MEM_BLOCK* start = last_alloc && (alloc_min_size <= aligned_size || last_alloc->size <= aligned_size) ? last_alloc->next : free_list;
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <k_mem_alloc+0x138>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00e      	beq.n	8000f4c <k_mem_alloc+0x48>
 8000f2e:	4b44      	ldr	r3, [pc, #272]	; (8001040 <k_mem_alloc+0x13c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d205      	bcs.n	8000f44 <k_mem_alloc+0x40>
 8000f38:	4b40      	ldr	r3, [pc, #256]	; (800103c <k_mem_alloc+0x138>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d303      	bcc.n	8000f4c <k_mem_alloc+0x48>
 8000f44:	4b3d      	ldr	r3, [pc, #244]	; (800103c <k_mem_alloc+0x138>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	e001      	b.n	8000f50 <k_mem_alloc+0x4c>
 8000f4c:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <k_mem_alloc+0x140>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	617b      	str	r3, [r7, #20]
//    MEM_BLOCK* start = last_alloc ? last_alloc->next : free_list;

    MEM_BLOCK* curr = start;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	61fb      	str	r3, [r7, #28]
    MEM_BLOCK* prev = NULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]

    do {
        if (!curr->allocated && curr->size >= aligned_size) {
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d154      	bne.n	800100c <k_mem_alloc+0x108>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d84f      	bhi.n	800100c <k_mem_alloc+0x108>
            if (curr->size >= aligned_size + MEM_BLOCK_SIZE + 4) {
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	2118      	movs	r1, #24
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	440b      	add	r3, r1
 8000f76:	3304      	adds	r3, #4
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d32b      	bcc.n	8000fd4 <k_mem_alloc+0xd0>
                MEM_BLOCK* new_block = (MEM_BLOCK*)((uint32_t)curr + MEM_BLOCK_SIZE + aligned_size);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2218      	movs	r2, #24
 8000f80:	441a      	add	r2, r3
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4413      	add	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
                new_block->size = curr->size - aligned_size - MEM_BLOCK_SIZE;
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2218      	movs	r2, #24
 8000f92:	1a9a      	subs	r2, r3, r2
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	615a      	str	r2, [r3, #20]
                new_block->owner = TID_NULL;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
                new_block->allocated = 0;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	711a      	strb	r2, [r3, #4]
                new_block->next = curr->next;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	609a      	str	r2, [r3, #8]
                new_block->prev = curr;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	60da      	str	r2, [r3, #12]
                new_block->start_location = new_block;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

                if (curr->next) {
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <k_mem_alloc+0xc4>
                    curr->next->prev = new_block;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	60da      	str	r2, [r3, #12]
                }

                curr->size = aligned_size;
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	615a      	str	r2, [r3, #20]
                curr->next = new_block;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	609a      	str	r2, [r3, #8]
            }

            curr->allocated = 1;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	711a      	strb	r2, [r3, #4]
            curr->owner = new_TID;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <k_mem_alloc+0x144>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	601a      	str	r2, [r3, #0]
            last_alloc = curr;
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <k_mem_alloc+0x138>)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	6013      	str	r3, [r2, #0]
            alloc_min_size = (last_alloc) ? ((alloc_min_size < aligned_size) ? alloc_min_size : aligned_size) : aligned_size;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <k_mem_alloc+0x138>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <k_mem_alloc+0xfa>
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <k_mem_alloc+0x13c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	bf28      	it	cs
 8000ffa:	4613      	movcs	r3, r2
 8000ffc:	e000      	b.n	8001000 <k_mem_alloc+0xfc>
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <k_mem_alloc+0x13c>)
 8001002:	6013      	str	r3, [r2, #0]


            return (void*)((uint32_t)curr + MEM_BLOCK_SIZE);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2218      	movs	r2, #24
 8001008:	4413      	add	r3, r2
 800100a:	e010      	b.n	800102e <k_mem_alloc+0x12a>
        }

        prev = curr;
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	613b      	str	r3, [r7, #16]
        curr = curr->next ? curr->next : free_list;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <k_mem_alloc+0x11a>
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	e001      	b.n	8001022 <k_mem_alloc+0x11e>
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <k_mem_alloc+0x140>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	61fb      	str	r3, [r7, #28]
    } while (curr != start);
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	d196      	bne.n	8000f5a <k_mem_alloc+0x56>

    return NULL;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000280 	.word	0x20000280
 800103c:	20000290 	.word	0x20000290
 8001040:	20000294 	.word	0x20000294
 8001044:	20000284 	.word	0x20000284
 8001048:	2000027c 	.word	0x2000027c

0800104c <align_to_word>:




// align word size with boundary - 4Bytes
static uint32_t align_to_word(uint32_t size) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    return (size + 3) & ~0x03; // bitwise NOT
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3303      	adds	r3, #3
 8001058:	f023 0303 	bic.w	r3, r3, #3
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_MspInit+0x4c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010a6:	2007      	movs	r0, #7
 80010a8:	f000 fc3a 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800

080010b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_UART_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12b      	bne.n	8001132 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_UART_MspInit+0x88>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_UART_MspInit+0x88>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_UART_MspInit+0x88>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_UART_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <HAL_UART_MspInit+0x88>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_UART_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001112:	230c      	movs	r3, #12
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001122:	2307      	movs	r3, #7
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_UART_MspInit+0x8c>)
 800112e:	f000 fc2b 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40004400 	.word	0x40004400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800114c:	e7fe      	b.n	800114c <NMI_Handler+0x4>

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <MemManage_Handler+0x4>

0800115a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>

08001166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <updateTaskTimes>:


int context_switch_required = 0;

// Update time remaining for all tasks
void updateTaskTimes(void) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
    for (int i = 1; i < MAX_TASKS; i++) {
 800117a:	2301      	movs	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	e060      	b.n	8001242 <updateTaskTimes+0xce>
		if (task_list[i].time_remaining > 0 && task_list[i].state != DORMANT ) {
 8001180:	4935      	ldr	r1, [pc, #212]	; (8001258 <updateTaskTimes+0xe4>)
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	3318      	adds	r3, #24
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d01d      	beq.n	80011d2 <updateTaskTimes+0x5e>
 8001196:	4930      	ldr	r1, [pc, #192]	; (8001258 <updateTaskTimes+0xe4>)
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	330c      	adds	r3, #12
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d012      	beq.n	80011d2 <updateTaskTimes+0x5e>
			task_list[i].time_remaining--;
 80011ac:	492a      	ldr	r1, [pc, #168]	; (8001258 <updateTaskTimes+0xe4>)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	3318      	adds	r3, #24
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1e59      	subs	r1, r3, #1
 80011c0:	4825      	ldr	r0, [pc, #148]	; (8001258 <updateTaskTimes+0xe4>)
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4403      	add	r3, r0
 80011ce:	3318      	adds	r3, #24
 80011d0:	6019      	str	r1, [r3, #0]
		}
		if (task_list[i].time_remaining == 0 && task_list[i].state != DORMANT ) {
 80011d2:	4921      	ldr	r1, [pc, #132]	; (8001258 <updateTaskTimes+0xe4>)
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	3318      	adds	r3, #24
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d129      	bne.n	800123c <updateTaskTimes+0xc8>
 80011e8:	491b      	ldr	r1, [pc, #108]	; (8001258 <updateTaskTimes+0xe4>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	330c      	adds	r3, #12
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d01e      	beq.n	800123c <updateTaskTimes+0xc8>
			task_list[i].state = READY;
 80011fe:	4916      	ldr	r1, [pc, #88]	; (8001258 <updateTaskTimes+0xe4>)
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	330c      	adds	r3, #12
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
			task_list[i].time_remaining = task_list[i].deadline;
 8001212:	4911      	ldr	r1, [pc, #68]	; (8001258 <updateTaskTimes+0xe4>)
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3314      	adds	r3, #20
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <updateTaskTimes+0xe4>)
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4403      	add	r3, r0
 8001232:	3318      	adds	r3, #24
 8001234:	6019      	str	r1, [r3, #0]
			context_switch_required = 1;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <updateTaskTimes+0xe8>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
    for (int i = 1; i < MAX_TASKS; i++) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	dd9b      	ble.n	8001180 <updateTaskTimes+0xc>
		}
    }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000094 	.word	0x20000094
 800125c:	20000298 	.word	0x20000298

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8001264:	f000 fa8a 	bl	800177c <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    if (!kernel_running) {
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <SysTick_Handler+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d025      	beq.n	80012bc <SysTick_Handler+0x5c>
        return;
    }
    g_system_time++;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <SysTick_Handler+0x68>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <SysTick_Handler+0x68>)
 8001278:	6013      	str	r3, [r2, #0]
    context_switch_required = 0;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <SysTick_Handler+0x6c>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

    updateTaskTimes();
 8001280:	f7ff ff78 	bl	8001174 <updateTaskTimes>


    if (context_switch_required) {
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <SysTick_Handler+0x6c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01a      	beq.n	80012c2 <SysTick_Handler+0x62>

    	// task_list[current_TID].state = READY;

    	next_TID = getEarliestDeadlineTask();
 800128c:	f7ff fa24 	bl	80006d8 <getEarliestDeadlineTask>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <SysTick_Handler+0x70>)
 8001296:	601a      	str	r2, [r3, #0]

    	if (current_TID == next_TID) {
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <SysTick_Handler+0x74>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <SysTick_Handler+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d00d      	beq.n	80012c0 <SysTick_Handler+0x60>
    		return;
    	}

		svc_number = 2;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <SysTick_Handler+0x78>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	601a      	str	r2, [r3, #0]
		// need to osYield on current task
		// trigger context switch => osYield
		SCB->ICSR |= (0x1 << 28);
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <SysTick_Handler+0x7c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <SysTick_Handler+0x7c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6053      	str	r3, [r2, #4]
		__asm("isb");
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	e002      	b.n	80012c2 <SysTick_Handler+0x62>
        return;
 80012bc:	bf00      	nop
 80012be:	e000      	b.n	80012c2 <SysTick_Handler+0x62>
    		return;
 80012c0:	bf00      	nop
    }
    /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000278 	.word	0x20000278
 80012c8:	20000270 	.word	0x20000270
 80012cc:	20000298 	.word	0x20000298
 80012d0:	20000258 	.word	0x20000258
 80012d4:	20000254 	.word	0x20000254
 80012d8:	2000026c 	.word	0x2000026c
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e00a      	b.n	8001308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f2:	f3af 8000 	nop.w
 80012f6:	4601      	mov	r1, r0
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	60ba      	str	r2, [r7, #8]
 80012fe:	b2ca      	uxtb	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf0      	blt.n	80012f2 <_read+0x12>
  }

  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e009      	b.n	8001340 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60ba      	str	r2, [r7, #8]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f889 	bl	800144c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	dbf1      	blt.n	800132c <_write+0x12>
  }
  return len;
 8001348:	687b      	ldr	r3, [r7, #4]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_close>:

int _close(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137a:	605a      	str	r2, [r3, #4]
  return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_isatty>:

int _isatty(int file)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f001 fcc4 	bl	8002d78 <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20018000 	.word	0x20018000
 800141c:	00004000 	.word	0x00004000
 8001420:	2000029c 	.word	0x2000029c
 8001424:	200002f8 	.word	0x200002f8

08001428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <SystemInit+0x20>)
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <SystemInit+0x20>)
 8001434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__io_putchar>:
//Needed for printf
UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch,1,HAL_MAX_DELAY);
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	2201      	movs	r2, #1
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <__io_putchar+0x20>)
 800145e:	f001 f916 	bl	800268e <HAL_UART_Transmit>
	return ch;
 8001462:	687b      	ldr	r3, [r7, #4]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002a0 	.word	0x200002a0

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	; 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	2230      	movs	r2, #48	; 0x30
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fca4 	bl	8002dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	4b29      	ldr	r3, [pc, #164]	; (8001540 <SystemClock_Config+0xd0>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a28      	ldr	r2, [pc, #160]	; (8001540 <SystemClock_Config+0xd0>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <SystemClock_Config+0xd0>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <SystemClock_Config+0xd4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014bc:	4a21      	ldr	r2, [pc, #132]	; (8001544 <SystemClock_Config+0xd4>)
 80014be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <SystemClock_Config+0xd4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d8:	2310      	movs	r3, #16
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014e4:	2310      	movs	r3, #16
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014ee:	2304      	movs	r3, #4
 80014f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014f2:	2307      	movs	r3, #7
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fbe2 	bl	8001cc4 <HAL_RCC_OscConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001506:	f000 f8b7 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150a:	230f      	movs	r3, #15
 800150c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150e:	2302      	movs	r3, #2
 8001510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2102      	movs	r1, #2
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fe44 	bl	80021b4 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001532:	f000 f8a1 	bl	8001678 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	; 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_USART2_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001580:	f001 f838 	bl	80025f4 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f000 f875 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002a0 	.word	0x200002a0
 8001598:	40004400 	.word	0x40004400

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <MX_GPIO_Init+0xd0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a2c      	ldr	r2, [pc, #176]	; (800166c <MX_GPIO_Init+0xd0>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <MX_GPIO_Init+0xd0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <MX_GPIO_Init+0xd0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a25      	ldr	r2, [pc, #148]	; (800166c <MX_GPIO_Init+0xd0>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <MX_GPIO_Init+0xd0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <MX_GPIO_Init+0xd0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <MX_GPIO_Init+0xd0>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_GPIO_Init+0xd0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_GPIO_Init+0xd0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <MX_GPIO_Init+0xd0>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_GPIO_Init+0xd0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2120      	movs	r1, #32
 8001626:	4812      	ldr	r0, [pc, #72]	; (8001670 <MX_GPIO_Init+0xd4>)
 8001628:	f000 fb32 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800162c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001632:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <MX_GPIO_Init+0xd8>)
 8001644:	f000 f9a0 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001648:	2320      	movs	r3, #32
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_GPIO_Init+0xd4>)
 8001660:	f000 f992 	bl	8001988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020800 	.word	0x40020800

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a0:	4c0b      	ldr	r4, [pc, #44]	; (80016d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ae:	f7ff febb 	bl	8001428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f001 fb67 	bl	8002d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7fe ffb7 	bl	8000628 <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016c8:	08003910 	.word	0x08003910
  ldr r2, =_sbss
 80016cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016d0:	200002f8 	.word	0x200002f8

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f90d 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fcac 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f917 	bl	800196e <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f8ed 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000000 	.word	0x20000000
 8001774:	20000008 	.word	0x20000008
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008
 80017a0:	200002e4 	.word	0x200002e4

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200002e4 	.word	0x200002e4

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff47 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff5c 	bl	8001804 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffb0 	bl	80018dc <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e159      	b.n	8001c58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8148 	bne.w	8001c52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a2 	beq.w	8001c52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b54      	ldr	r3, [pc, #336]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d019      	beq.n	8001b8a <HAL_GPIO_Init+0x202>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2f4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_GPIO_Init+0x1fe>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a47      	ldr	r2, [pc, #284]	; (8001c80 <HAL_GPIO_Init+0x2f8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00d      	beq.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a46      	ldr	r2, [pc, #280]	; (8001c84 <HAL_GPIO_Init+0x2fc>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <HAL_GPIO_Init+0x1f6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <HAL_GPIO_Init+0x300>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d101      	bne.n	8001b7a <HAL_GPIO_Init+0x1f2>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bce:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f aea2 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e267      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d075      	beq.n	8001dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ce2:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d00c      	beq.n	8001d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cee:	4b85      	ldr	r3, [pc, #532]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d112      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfa:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	4b7e      	ldr	r3, [pc, #504]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d05b      	beq.n	8001dcc <HAL_RCC_OscConfig+0x108>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d157      	bne.n	8001dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e242      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_OscConfig+0x74>
 8001d2a:	4b76      	ldr	r3, [pc, #472]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a75      	ldr	r2, [pc, #468]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6f      	ldr	r2, [pc, #444]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b6d      	ldr	r3, [pc, #436]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6c      	ldr	r2, [pc, #432]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a68      	ldr	r2, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a65      	ldr	r2, [pc, #404]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fd12 	bl	80017a4 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fd0e 	bl	80017a4 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e207      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0xc0>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fcfe 	bl	80017a4 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fcfa 	bl	80017a4 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1f3      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0xe8>
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d063      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dda:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d11c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d116      	bne.n	8001e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x152>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e1c7      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4937      	ldr	r1, [pc, #220]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	e03a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_OscConfig+0x244>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7ff fcb3 	bl	80017a4 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e42:	f7ff fcaf 	bl	80017a4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1a8      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4925      	ldr	r1, [pc, #148]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_OscConfig+0x244>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fc92 	bl	80017a4 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e84:	f7ff fc8e 	bl	80017a4 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e187      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d036      	beq.n	8001f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d016      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_RCC_OscConfig+0x248>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fc72 	bl	80017a4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fc6e 	bl	80017a4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e167      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x200>
 8001ee2:	e01b      	b.n	8001f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_OscConfig+0x248>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fc5b 	bl	80017a4 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	e00e      	b.n	8001f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fc57 	bl	80017a4 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d907      	bls.n	8001f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e150      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
 8001f04:	40023800 	.word	0x40023800
 8001f08:	42470000 	.word	0x42470000
 8001f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ea      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8097 	beq.w	8002058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b81      	ldr	r3, [pc, #516]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a7c      	ldr	r2, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b7a      	ldr	r3, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b77      	ldr	r3, [pc, #476]	; (8002138 <HAL_RCC_OscConfig+0x474>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d118      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f66:	4b74      	ldr	r3, [pc, #464]	; (8002138 <HAL_RCC_OscConfig+0x474>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a73      	ldr	r2, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0x474>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7ff fc17 	bl	80017a4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7ff fc13 	bl	80017a4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e10c      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <HAL_RCC_OscConfig+0x474>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x2ea>
 8001fa0:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4a63      	ldr	r2, [pc, #396]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
 8001fac:	e01c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x324>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x30c>
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	4a5e      	ldr	r2, [pc, #376]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	4a5b      	ldr	r2, [pc, #364]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x324>
 8001fd0:	4b58      	ldr	r3, [pc, #352]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a57      	ldr	r2, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	4b55      	ldr	r3, [pc, #340]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a54      	ldr	r2, [pc, #336]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f023 0304 	bic.w	r3, r3, #4
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d015      	beq.n	800201c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fbd8 	bl	80017a4 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fbd4 	bl	80017a4 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0cb      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ee      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x334>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7ff fbc2 	bl	80017a4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7ff fbbe 	bl	80017a4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0b5      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203a:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ee      	bne.n	8002024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a1 	beq.w	80021a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	d05c      	beq.n	8002128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d141      	bne.n	80020fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCC_OscConfig+0x478>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fb92 	bl	80017a4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff fb8e 	bl	80017a4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e087      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	019b      	lsls	r3, r3, #6
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	3b01      	subs	r3, #1
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	491b      	ldr	r1, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_RCC_OscConfig+0x478>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fb67 	bl	80017a4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff fb63 	bl	80017a4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e05c      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x416>
 80020f8:	e054      	b.n	80021a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_RCC_OscConfig+0x478>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fb50 	bl	80017a4 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff fb4c 	bl	80017a4 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e045      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_OscConfig+0x470>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x444>
 8002126:	e03d      	b.n	80021a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e038      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
 8002134:	40023800 	.word	0x40023800
 8002138:	40007000 	.word	0x40007000
 800213c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x4ec>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d028      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d121      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d11a      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002170:	4013      	ands	r3, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002178:	4293      	cmp	r3, r2
 800217a:	d111      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	085b      	lsrs	r3, r3, #1
 8002188:	3b01      	subs	r3, #1
 800218a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0cc      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d90c      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b65      	ldr	r3, [pc, #404]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b59      	ldr	r3, [pc, #356]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a58      	ldr	r2, [pc, #352]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a52      	ldr	r2, [pc, #328]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800222a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222c:	4b50      	ldr	r3, [pc, #320]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	494d      	ldr	r1, [pc, #308]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d044      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d119      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d003      	beq.n	8002272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e067      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4934      	ldr	r1, [pc, #208]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a4:	f7ff fa7e 	bl	80017a4 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7ff fa7a 	bl	80017a4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e04f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d20c      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e032      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4916      	ldr	r1, [pc, #88]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490e      	ldr	r1, [pc, #56]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f821 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800233e:	4602      	mov	r2, r0
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	490a      	ldr	r1, [pc, #40]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	5ccb      	ldrb	r3, [r1, r3]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f9de 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00
 8002370:	40023800 	.word	0x40023800
 8002374:	08003884 	.word	0x08003884
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b094      	sub	sp, #80	; 0x50
 8002386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	647b      	str	r3, [r7, #68]	; 0x44
 800238c:	2300      	movs	r3, #0
 800238e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002390:	2300      	movs	r3, #0
 8002392:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002398:	4b79      	ldr	r3, [pc, #484]	; (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x40>
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	f200 80e1 	bhi.w	800256c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x34>
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x3a>
 80023b2:	e0db      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b73      	ldr	r3, [pc, #460]	; (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 80023b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023b8:	e0db      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ba:	4b73      	ldr	r3, [pc, #460]	; (8002588 <HAL_RCC_GetSysClockFreq+0x208>)
 80023bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023be:	e0d8      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ca:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d6:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	2200      	movs	r2, #0
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
 80023ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023f2:	4622      	mov	r2, r4
 80023f4:	462b      	mov	r3, r5
 80023f6:	f04f 0000 	mov.w	r0, #0
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	0159      	lsls	r1, r3, #5
 8002400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002404:	0150      	lsls	r0, r2, #5
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4621      	mov	r1, r4
 800240c:	1a51      	subs	r1, r2, r1
 800240e:	6139      	str	r1, [r7, #16]
 8002410:	4629      	mov	r1, r5
 8002412:	eb63 0301 	sbc.w	r3, r3, r1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002424:	4659      	mov	r1, fp
 8002426:	018b      	lsls	r3, r1, #6
 8002428:	4651      	mov	r1, sl
 800242a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800242e:	4651      	mov	r1, sl
 8002430:	018a      	lsls	r2, r1, #6
 8002432:	4651      	mov	r1, sl
 8002434:	ebb2 0801 	subs.w	r8, r2, r1
 8002438:	4659      	mov	r1, fp
 800243a:	eb63 0901 	sbc.w	r9, r3, r1
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	4623      	mov	r3, r4
 8002458:	eb18 0303 	adds.w	r3, r8, r3
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	462b      	mov	r3, r5
 8002460:	eb49 0303 	adc.w	r3, r9, r3
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002472:	4629      	mov	r1, r5
 8002474:	024b      	lsls	r3, r1, #9
 8002476:	4621      	mov	r1, r4
 8002478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800247c:	4621      	mov	r1, r4
 800247e:	024a      	lsls	r2, r1, #9
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002486:	2200      	movs	r2, #0
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
 800248a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800248c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002490:	f7fd fee8 	bl	8000264 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4613      	mov	r3, r2
 800249a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800249c:	e058      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	4b38      	ldr	r3, [pc, #224]	; (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	2200      	movs	r2, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	4611      	mov	r1, r2
 80024aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
 80024b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0159      	lsls	r1, r3, #5
 80024c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ca:	0150      	lsls	r0, r2, #5
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4641      	mov	r1, r8
 80024d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024d6:	4649      	mov	r1, r9
 80024d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f0:	ebb2 040a 	subs.w	r4, r2, sl
 80024f4:	eb63 050b 	sbc.w	r5, r3, fp
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	00eb      	lsls	r3, r5, #3
 8002502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002506:	00e2      	lsls	r2, r4, #3
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4643      	mov	r3, r8
 800250e:	18e3      	adds	r3, r4, r3
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	464b      	mov	r3, r9
 8002514:	eb45 0303 	adc.w	r3, r5, r3
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002526:	4629      	mov	r1, r5
 8002528:	028b      	lsls	r3, r1, #10
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002530:	4621      	mov	r1, r4
 8002532:	028a      	lsls	r2, r1, #10
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253a:	2200      	movs	r2, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	61fa      	str	r2, [r7, #28]
 8002540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002544:	f7fd fe8e 	bl	8000264 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4613      	mov	r3, r2
 800254e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002574:	4618      	mov	r0, r3
 8002576:	3750      	adds	r7, #80	; 0x50
 8002578:	46bd      	mov	sp, r7
 800257a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	00f42400 	.word	0x00f42400
 8002588:	007a1200 	.word	0x007a1200

0800258c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000000 	.word	0x20000000

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025a8:	f7ff fff0 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	08003894 	.word	0x08003894

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025d0:	f7ff ffdc 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0b5b      	lsrs	r3, r3, #13
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	08003894 	.word	0x08003894

080025f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e03f      	b.n	8002686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fd4c 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f929 	bl	8002890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800264c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b08a      	sub	sp, #40	; 0x28
 8002692:	af02      	add	r7, sp, #8
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d17c      	bne.n	80027a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_UART_Transmit+0x2c>
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e075      	b.n	80027aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_UART_Transmit+0x3e>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e06e      	b.n	80027aa <HAL_UART_Transmit+0x11c>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2221      	movs	r2, #33	; 0x21
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e2:	f7ff f85f 	bl	80017a4 <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	88fa      	ldrh	r2, [r7, #6]
 80026f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fc:	d108      	bne.n	8002710 <HAL_UART_Transmit+0x82>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	e003      	b.n	8002718 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002720:	e02a      	b.n	8002778 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f840 	bl	80027b2 <UART_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e036      	b.n	80027aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3302      	adds	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e007      	b.n	800276a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1cf      	bne.n	8002722 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2200      	movs	r2, #0
 800278a:	2140      	movs	r1, #64	; 0x40
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f810 	bl	80027b2 <UART_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e006      	b.n	80027aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b090      	sub	sp, #64	; 0x40
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c2:	e050      	b.n	8002866 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d04c      	beq.n	8002866 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80027d2:	f7fe ffe7 	bl	80017a4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027de:	429a      	cmp	r2, r3
 80027e0:	d241      	bcs.n	8002866 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	e853 3f00 	ldrex	r3, [r3]
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002802:	637a      	str	r2, [r7, #52]	; 0x34
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002806:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800280a:	e841 2300 	strex	r3, r2, [r1]
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1e5      	bne.n	80027e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	613b      	str	r3, [r7, #16]
   return(result);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3314      	adds	r3, #20
 8002834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002836:	623a      	str	r2, [r7, #32]
 8002838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	69f9      	ldr	r1, [r7, #28]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	61bb      	str	r3, [r7, #24]
   return(result);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e5      	bne.n	8002816 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e00f      	b.n	8002886 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4013      	ands	r3, r2
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	bf0c      	ite	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	2300      	movne	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	429a      	cmp	r2, r3
 8002882:	d09f      	beq.n	80027c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3740      	adds	r7, #64	; 0x40
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002894:	b0c0      	sub	sp, #256	; 0x100
 8002896:	af00      	add	r7, sp, #0
 8002898:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	68d9      	ldr	r1, [r3, #12]
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	ea40 0301 	orr.w	r3, r0, r1
 80028b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028e8:	f021 010c 	bic.w	r1, r1, #12
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028f6:	430b      	orrs	r3, r1
 80028f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290a:	6999      	ldr	r1, [r3, #24]
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	ea40 0301 	orr.w	r3, r0, r1
 8002916:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b8f      	ldr	r3, [pc, #572]	; (8002b5c <UART_SetConfig+0x2cc>)
 8002920:	429a      	cmp	r2, r3
 8002922:	d005      	beq.n	8002930 <UART_SetConfig+0xa0>
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b8d      	ldr	r3, [pc, #564]	; (8002b60 <UART_SetConfig+0x2d0>)
 800292c:	429a      	cmp	r2, r3
 800292e:	d104      	bne.n	800293a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002930:	f7ff fe4c 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8002934:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002938:	e003      	b.n	8002942 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800293a:	f7ff fe33 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 800293e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294c:	f040 810c 	bne.w	8002b68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002954:	2200      	movs	r2, #0
 8002956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800295a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800295e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002962:	4622      	mov	r2, r4
 8002964:	462b      	mov	r3, r5
 8002966:	1891      	adds	r1, r2, r2
 8002968:	65b9      	str	r1, [r7, #88]	; 0x58
 800296a:	415b      	adcs	r3, r3
 800296c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800296e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002972:	4621      	mov	r1, r4
 8002974:	eb12 0801 	adds.w	r8, r2, r1
 8002978:	4629      	mov	r1, r5
 800297a:	eb43 0901 	adc.w	r9, r3, r1
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800298a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800298e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002992:	4690      	mov	r8, r2
 8002994:	4699      	mov	r9, r3
 8002996:	4623      	mov	r3, r4
 8002998:	eb18 0303 	adds.w	r3, r8, r3
 800299c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029a0:	462b      	mov	r3, r5
 80029a2:	eb49 0303 	adc.w	r3, r9, r3
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029be:	460b      	mov	r3, r1
 80029c0:	18db      	adds	r3, r3, r3
 80029c2:	653b      	str	r3, [r7, #80]	; 0x50
 80029c4:	4613      	mov	r3, r2
 80029c6:	eb42 0303 	adc.w	r3, r2, r3
 80029ca:	657b      	str	r3, [r7, #84]	; 0x54
 80029cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029d4:	f7fd fc46 	bl	8000264 <__aeabi_uldivmod>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4b61      	ldr	r3, [pc, #388]	; (8002b64 <UART_SetConfig+0x2d4>)
 80029de:	fba3 2302 	umull	r2, r3, r3, r2
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	011c      	lsls	r4, r3, #4
 80029e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029f8:	4642      	mov	r2, r8
 80029fa:	464b      	mov	r3, r9
 80029fc:	1891      	adds	r1, r2, r2
 80029fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a00:	415b      	adcs	r3, r3
 8002a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a08:	4641      	mov	r1, r8
 8002a0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a0e:	4649      	mov	r1, r9
 8002a10:	eb43 0b01 	adc.w	fp, r3, r1
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a28:	4692      	mov	sl, r2
 8002a2a:	469b      	mov	fp, r3
 8002a2c:	4643      	mov	r3, r8
 8002a2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a36:	464b      	mov	r3, r9
 8002a38:	eb4b 0303 	adc.w	r3, fp, r3
 8002a3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a54:	460b      	mov	r3, r1
 8002a56:	18db      	adds	r3, r3, r3
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	eb42 0303 	adc.w	r3, r2, r3
 8002a60:	647b      	str	r3, [r7, #68]	; 0x44
 8002a62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a6a:	f7fd fbfb 	bl	8000264 <__aeabi_uldivmod>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <UART_SetConfig+0x2d4>)
 8002a76:	fba3 2301 	umull	r2, r3, r3, r1
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2264      	movs	r2, #100	; 0x64
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	1acb      	subs	r3, r1, r3
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <UART_SetConfig+0x2d4>)
 8002a8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a98:	441c      	add	r4, r3
 8002a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002aa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002aac:	4642      	mov	r2, r8
 8002aae:	464b      	mov	r3, r9
 8002ab0:	1891      	adds	r1, r2, r2
 8002ab2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ab4:	415b      	adcs	r3, r3
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002abc:	4641      	mov	r1, r8
 8002abe:	1851      	adds	r1, r2, r1
 8002ac0:	6339      	str	r1, [r7, #48]	; 0x30
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	414b      	adcs	r3, r1
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	00cb      	lsls	r3, r1, #3
 8002ad8:	4651      	mov	r1, sl
 8002ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ade:	4651      	mov	r1, sl
 8002ae0:	00ca      	lsls	r2, r1, #3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4642      	mov	r2, r8
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af0:	464b      	mov	r3, r9
 8002af2:	460a      	mov	r2, r1
 8002af4:	eb42 0303 	adc.w	r3, r2, r3
 8002af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b10:	460b      	mov	r3, r1
 8002b12:	18db      	adds	r3, r3, r3
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b16:	4613      	mov	r3, r2
 8002b18:	eb42 0303 	adc.w	r3, r2, r3
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b26:	f7fd fb9d 	bl	8000264 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <UART_SetConfig+0x2d4>)
 8002b30:	fba3 1302 	umull	r1, r3, r3, r2
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	2164      	movs	r1, #100	; 0x64
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	3332      	adds	r3, #50	; 0x32
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <UART_SetConfig+0x2d4>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	f003 0207 	and.w	r2, r3, #7
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4422      	add	r2, r4
 8002b56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b58:	e105      	b.n	8002d66 <UART_SetConfig+0x4d6>
 8002b5a:	bf00      	nop
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b7a:	4642      	mov	r2, r8
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	1891      	adds	r1, r2, r2
 8002b80:	6239      	str	r1, [r7, #32]
 8002b82:	415b      	adcs	r3, r3
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	1854      	adds	r4, r2, r1
 8002b8e:	4649      	mov	r1, r9
 8002b90:	eb43 0501 	adc.w	r5, r3, r1
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	00eb      	lsls	r3, r5, #3
 8002b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba2:	00e2      	lsls	r2, r4, #3
 8002ba4:	4614      	mov	r4, r2
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	4643      	mov	r3, r8
 8002baa:	18e3      	adds	r3, r4, r3
 8002bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bb0:	464b      	mov	r3, r9
 8002bb2:	eb45 0303 	adc.w	r3, r5, r3
 8002bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	008b      	lsls	r3, r1, #2
 8002bda:	4621      	mov	r1, r4
 8002bdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002be0:	4621      	mov	r1, r4
 8002be2:	008a      	lsls	r2, r1, #2
 8002be4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002be8:	f7fd fb3c 	bl	8000264 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4b60      	ldr	r3, [pc, #384]	; (8002d74 <UART_SetConfig+0x4e4>)
 8002bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	011c      	lsls	r4, r3, #4
 8002bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	464b      	mov	r3, r9
 8002c10:	1891      	adds	r1, r2, r2
 8002c12:	61b9      	str	r1, [r7, #24]
 8002c14:	415b      	adcs	r3, r3
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	1851      	adds	r1, r2, r1
 8002c20:	6139      	str	r1, [r7, #16]
 8002c22:	4649      	mov	r1, r9
 8002c24:	414b      	adcs	r3, r1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c34:	4659      	mov	r1, fp
 8002c36:	00cb      	lsls	r3, r1, #3
 8002c38:	4651      	mov	r1, sl
 8002c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c3e:	4651      	mov	r1, sl
 8002c40:	00ca      	lsls	r2, r1, #3
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	4642      	mov	r2, r8
 8002c4a:	189b      	adds	r3, r3, r2
 8002c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c50:	464b      	mov	r3, r9
 8002c52:	460a      	mov	r2, r1
 8002c54:	eb42 0303 	adc.w	r3, r2, r3
 8002c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c74:	4649      	mov	r1, r9
 8002c76:	008b      	lsls	r3, r1, #2
 8002c78:	4641      	mov	r1, r8
 8002c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c7e:	4641      	mov	r1, r8
 8002c80:	008a      	lsls	r2, r1, #2
 8002c82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c86:	f7fd faed 	bl	8000264 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <UART_SetConfig+0x4e4>)
 8002c90:	fba3 1302 	umull	r1, r3, r3, r2
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	2164      	movs	r1, #100	; 0x64
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	3332      	adds	r3, #50	; 0x32
 8002ca2:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <UART_SetConfig+0x4e4>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cae:	441c      	add	r4, r3
 8002cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8002cb8:	677a      	str	r2, [r7, #116]	; 0x74
 8002cba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cbe:	4642      	mov	r2, r8
 8002cc0:	464b      	mov	r3, r9
 8002cc2:	1891      	adds	r1, r2, r2
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	415b      	adcs	r3, r3
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cce:	4641      	mov	r1, r8
 8002cd0:	1851      	adds	r1, r2, r1
 8002cd2:	6039      	str	r1, [r7, #0]
 8002cd4:	4649      	mov	r1, r9
 8002cd6:	414b      	adcs	r3, r1
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ce6:	4659      	mov	r1, fp
 8002ce8:	00cb      	lsls	r3, r1, #3
 8002cea:	4651      	mov	r1, sl
 8002cec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cf0:	4651      	mov	r1, sl
 8002cf2:	00ca      	lsls	r2, r1, #3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4642      	mov	r2, r8
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d00:	464b      	mov	r3, r9
 8002d02:	460a      	mov	r2, r1
 8002d04:	eb42 0303 	adc.w	r3, r2, r3
 8002d08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	663b      	str	r3, [r7, #96]	; 0x60
 8002d14:	667a      	str	r2, [r7, #100]	; 0x64
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d22:	4649      	mov	r1, r9
 8002d24:	008b      	lsls	r3, r1, #2
 8002d26:	4641      	mov	r1, r8
 8002d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	008a      	lsls	r2, r1, #2
 8002d30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d34:	f7fd fa96 	bl	8000264 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <UART_SetConfig+0x4e4>)
 8002d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2164      	movs	r1, #100	; 0x64
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	3332      	adds	r3, #50	; 0x32
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <UART_SetConfig+0x4e4>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4422      	add	r2, r4
 8002d64:	609a      	str	r2, [r3, #8]
}
 8002d66:	bf00      	nop
 8002d68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d72:	bf00      	nop
 8002d74:	51eb851f 	.word	0x51eb851f

08002d78 <__errno>:
 8002d78:	4b01      	ldr	r3, [pc, #4]	; (8002d80 <__errno+0x8>)
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	2000000c 	.word	0x2000000c

08002d84 <__libc_init_array>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	4d0d      	ldr	r5, [pc, #52]	; (8002dbc <__libc_init_array+0x38>)
 8002d88:	4c0d      	ldr	r4, [pc, #52]	; (8002dc0 <__libc_init_array+0x3c>)
 8002d8a:	1b64      	subs	r4, r4, r5
 8002d8c:	10a4      	asrs	r4, r4, #2
 8002d8e:	2600      	movs	r6, #0
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d109      	bne.n	8002da8 <__libc_init_array+0x24>
 8002d94:	4d0b      	ldr	r5, [pc, #44]	; (8002dc4 <__libc_init_array+0x40>)
 8002d96:	4c0c      	ldr	r4, [pc, #48]	; (8002dc8 <__libc_init_array+0x44>)
 8002d98:	f000 fd1e 	bl	80037d8 <_init>
 8002d9c:	1b64      	subs	r4, r4, r5
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	2600      	movs	r6, #0
 8002da2:	42a6      	cmp	r6, r4
 8002da4:	d105      	bne.n	8002db2 <__libc_init_array+0x2e>
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
 8002da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dac:	4798      	blx	r3
 8002dae:	3601      	adds	r6, #1
 8002db0:	e7ee      	b.n	8002d90 <__libc_init_array+0xc>
 8002db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db6:	4798      	blx	r3
 8002db8:	3601      	adds	r6, #1
 8002dba:	e7f2      	b.n	8002da2 <__libc_init_array+0x1e>
 8002dbc:	08003908 	.word	0x08003908
 8002dc0:	08003908 	.word	0x08003908
 8002dc4:	08003908 	.word	0x08003908
 8002dc8:	0800390c 	.word	0x0800390c

08002dcc <memset>:
 8002dcc:	4402      	add	r2, r0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d100      	bne.n	8002dd6 <memset+0xa>
 8002dd4:	4770      	bx	lr
 8002dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dda:	e7f9      	b.n	8002dd0 <memset+0x4>

08002ddc <_puts_r>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	460e      	mov	r6, r1
 8002de0:	4605      	mov	r5, r0
 8002de2:	b118      	cbz	r0, 8002dec <_puts_r+0x10>
 8002de4:	6983      	ldr	r3, [r0, #24]
 8002de6:	b90b      	cbnz	r3, 8002dec <_puts_r+0x10>
 8002de8:	f000 fa48 	bl	800327c <__sinit>
 8002dec:	69ab      	ldr	r3, [r5, #24]
 8002dee:	68ac      	ldr	r4, [r5, #8]
 8002df0:	b913      	cbnz	r3, 8002df8 <_puts_r+0x1c>
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 fa42 	bl	800327c <__sinit>
 8002df8:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <_puts_r+0xd0>)
 8002dfa:	429c      	cmp	r4, r3
 8002dfc:	d120      	bne.n	8002e40 <_puts_r+0x64>
 8002dfe:	686c      	ldr	r4, [r5, #4]
 8002e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e02:	07db      	lsls	r3, r3, #31
 8002e04:	d405      	bmi.n	8002e12 <_puts_r+0x36>
 8002e06:	89a3      	ldrh	r3, [r4, #12]
 8002e08:	0598      	lsls	r0, r3, #22
 8002e0a:	d402      	bmi.n	8002e12 <_puts_r+0x36>
 8002e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e0e:	f000 fad3 	bl	80033b8 <__retarget_lock_acquire_recursive>
 8002e12:	89a3      	ldrh	r3, [r4, #12]
 8002e14:	0719      	lsls	r1, r3, #28
 8002e16:	d51d      	bpl.n	8002e54 <_puts_r+0x78>
 8002e18:	6923      	ldr	r3, [r4, #16]
 8002e1a:	b1db      	cbz	r3, 8002e54 <_puts_r+0x78>
 8002e1c:	3e01      	subs	r6, #1
 8002e1e:	68a3      	ldr	r3, [r4, #8]
 8002e20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60a3      	str	r3, [r4, #8]
 8002e28:	bb39      	cbnz	r1, 8002e7a <_puts_r+0x9e>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	da38      	bge.n	8002ea0 <_puts_r+0xc4>
 8002e2e:	4622      	mov	r2, r4
 8002e30:	210a      	movs	r1, #10
 8002e32:	4628      	mov	r0, r5
 8002e34:	f000 f848 	bl	8002ec8 <__swbuf_r>
 8002e38:	3001      	adds	r0, #1
 8002e3a:	d011      	beq.n	8002e60 <_puts_r+0x84>
 8002e3c:	250a      	movs	r5, #10
 8002e3e:	e011      	b.n	8002e64 <_puts_r+0x88>
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <_puts_r+0xd4>)
 8002e42:	429c      	cmp	r4, r3
 8002e44:	d101      	bne.n	8002e4a <_puts_r+0x6e>
 8002e46:	68ac      	ldr	r4, [r5, #8]
 8002e48:	e7da      	b.n	8002e00 <_puts_r+0x24>
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <_puts_r+0xd8>)
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	bf08      	it	eq
 8002e50:	68ec      	ldreq	r4, [r5, #12]
 8002e52:	e7d5      	b.n	8002e00 <_puts_r+0x24>
 8002e54:	4621      	mov	r1, r4
 8002e56:	4628      	mov	r0, r5
 8002e58:	f000 f888 	bl	8002f6c <__swsetup_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d0dd      	beq.n	8002e1c <_puts_r+0x40>
 8002e60:	f04f 35ff 	mov.w	r5, #4294967295
 8002e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e66:	07da      	lsls	r2, r3, #31
 8002e68:	d405      	bmi.n	8002e76 <_puts_r+0x9a>
 8002e6a:	89a3      	ldrh	r3, [r4, #12]
 8002e6c:	059b      	lsls	r3, r3, #22
 8002e6e:	d402      	bmi.n	8002e76 <_puts_r+0x9a>
 8002e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e72:	f000 faa2 	bl	80033ba <__retarget_lock_release_recursive>
 8002e76:	4628      	mov	r0, r5
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da04      	bge.n	8002e88 <_puts_r+0xac>
 8002e7e:	69a2      	ldr	r2, [r4, #24]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dc06      	bgt.n	8002e92 <_puts_r+0xb6>
 8002e84:	290a      	cmp	r1, #10
 8002e86:	d004      	beq.n	8002e92 <_puts_r+0xb6>
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	6022      	str	r2, [r4, #0]
 8002e8e:	7019      	strb	r1, [r3, #0]
 8002e90:	e7c5      	b.n	8002e1e <_puts_r+0x42>
 8002e92:	4622      	mov	r2, r4
 8002e94:	4628      	mov	r0, r5
 8002e96:	f000 f817 	bl	8002ec8 <__swbuf_r>
 8002e9a:	3001      	adds	r0, #1
 8002e9c:	d1bf      	bne.n	8002e1e <_puts_r+0x42>
 8002e9e:	e7df      	b.n	8002e60 <_puts_r+0x84>
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	250a      	movs	r5, #10
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	6022      	str	r2, [r4, #0]
 8002ea8:	701d      	strb	r5, [r3, #0]
 8002eaa:	e7db      	b.n	8002e64 <_puts_r+0x88>
 8002eac:	080038c0 	.word	0x080038c0
 8002eb0:	080038e0 	.word	0x080038e0
 8002eb4:	080038a0 	.word	0x080038a0

08002eb8 <puts>:
 8002eb8:	4b02      	ldr	r3, [pc, #8]	; (8002ec4 <puts+0xc>)
 8002eba:	4601      	mov	r1, r0
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	f7ff bf8d 	b.w	8002ddc <_puts_r>
 8002ec2:	bf00      	nop
 8002ec4:	2000000c 	.word	0x2000000c

08002ec8 <__swbuf_r>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	460e      	mov	r6, r1
 8002ecc:	4614      	mov	r4, r2
 8002ece:	4605      	mov	r5, r0
 8002ed0:	b118      	cbz	r0, 8002eda <__swbuf_r+0x12>
 8002ed2:	6983      	ldr	r3, [r0, #24]
 8002ed4:	b90b      	cbnz	r3, 8002eda <__swbuf_r+0x12>
 8002ed6:	f000 f9d1 	bl	800327c <__sinit>
 8002eda:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <__swbuf_r+0x98>)
 8002edc:	429c      	cmp	r4, r3
 8002ede:	d12b      	bne.n	8002f38 <__swbuf_r+0x70>
 8002ee0:	686c      	ldr	r4, [r5, #4]
 8002ee2:	69a3      	ldr	r3, [r4, #24]
 8002ee4:	60a3      	str	r3, [r4, #8]
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	071a      	lsls	r2, r3, #28
 8002eea:	d52f      	bpl.n	8002f4c <__swbuf_r+0x84>
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	b36b      	cbz	r3, 8002f4c <__swbuf_r+0x84>
 8002ef0:	6923      	ldr	r3, [r4, #16]
 8002ef2:	6820      	ldr	r0, [r4, #0]
 8002ef4:	1ac0      	subs	r0, r0, r3
 8002ef6:	6963      	ldr	r3, [r4, #20]
 8002ef8:	b2f6      	uxtb	r6, r6
 8002efa:	4283      	cmp	r3, r0
 8002efc:	4637      	mov	r7, r6
 8002efe:	dc04      	bgt.n	8002f0a <__swbuf_r+0x42>
 8002f00:	4621      	mov	r1, r4
 8002f02:	4628      	mov	r0, r5
 8002f04:	f000 f926 	bl	8003154 <_fflush_r>
 8002f08:	bb30      	cbnz	r0, 8002f58 <__swbuf_r+0x90>
 8002f0a:	68a3      	ldr	r3, [r4, #8]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60a3      	str	r3, [r4, #8]
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	6022      	str	r2, [r4, #0]
 8002f16:	701e      	strb	r6, [r3, #0]
 8002f18:	6963      	ldr	r3, [r4, #20]
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	4283      	cmp	r3, r0
 8002f1e:	d004      	beq.n	8002f2a <__swbuf_r+0x62>
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	07db      	lsls	r3, r3, #31
 8002f24:	d506      	bpl.n	8002f34 <__swbuf_r+0x6c>
 8002f26:	2e0a      	cmp	r6, #10
 8002f28:	d104      	bne.n	8002f34 <__swbuf_r+0x6c>
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f000 f911 	bl	8003154 <_fflush_r>
 8002f32:	b988      	cbnz	r0, 8002f58 <__swbuf_r+0x90>
 8002f34:	4638      	mov	r0, r7
 8002f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <__swbuf_r+0x9c>)
 8002f3a:	429c      	cmp	r4, r3
 8002f3c:	d101      	bne.n	8002f42 <__swbuf_r+0x7a>
 8002f3e:	68ac      	ldr	r4, [r5, #8]
 8002f40:	e7cf      	b.n	8002ee2 <__swbuf_r+0x1a>
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <__swbuf_r+0xa0>)
 8002f44:	429c      	cmp	r4, r3
 8002f46:	bf08      	it	eq
 8002f48:	68ec      	ldreq	r4, [r5, #12]
 8002f4a:	e7ca      	b.n	8002ee2 <__swbuf_r+0x1a>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f000 f80c 	bl	8002f6c <__swsetup_r>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d0cb      	beq.n	8002ef0 <__swbuf_r+0x28>
 8002f58:	f04f 37ff 	mov.w	r7, #4294967295
 8002f5c:	e7ea      	b.n	8002f34 <__swbuf_r+0x6c>
 8002f5e:	bf00      	nop
 8002f60:	080038c0 	.word	0x080038c0
 8002f64:	080038e0 	.word	0x080038e0
 8002f68:	080038a0 	.word	0x080038a0

08002f6c <__swsetup_r>:
 8002f6c:	4b32      	ldr	r3, [pc, #200]	; (8003038 <__swsetup_r+0xcc>)
 8002f6e:	b570      	push	{r4, r5, r6, lr}
 8002f70:	681d      	ldr	r5, [r3, #0]
 8002f72:	4606      	mov	r6, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	b125      	cbz	r5, 8002f82 <__swsetup_r+0x16>
 8002f78:	69ab      	ldr	r3, [r5, #24]
 8002f7a:	b913      	cbnz	r3, 8002f82 <__swsetup_r+0x16>
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f000 f97d 	bl	800327c <__sinit>
 8002f82:	4b2e      	ldr	r3, [pc, #184]	; (800303c <__swsetup_r+0xd0>)
 8002f84:	429c      	cmp	r4, r3
 8002f86:	d10f      	bne.n	8002fa8 <__swsetup_r+0x3c>
 8002f88:	686c      	ldr	r4, [r5, #4]
 8002f8a:	89a3      	ldrh	r3, [r4, #12]
 8002f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f90:	0719      	lsls	r1, r3, #28
 8002f92:	d42c      	bmi.n	8002fee <__swsetup_r+0x82>
 8002f94:	06dd      	lsls	r5, r3, #27
 8002f96:	d411      	bmi.n	8002fbc <__swsetup_r+0x50>
 8002f98:	2309      	movs	r3, #9
 8002f9a:	6033      	str	r3, [r6, #0]
 8002f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fa0:	81a3      	strh	r3, [r4, #12]
 8002fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa6:	e03e      	b.n	8003026 <__swsetup_r+0xba>
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <__swsetup_r+0xd4>)
 8002faa:	429c      	cmp	r4, r3
 8002fac:	d101      	bne.n	8002fb2 <__swsetup_r+0x46>
 8002fae:	68ac      	ldr	r4, [r5, #8]
 8002fb0:	e7eb      	b.n	8002f8a <__swsetup_r+0x1e>
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <__swsetup_r+0xd8>)
 8002fb4:	429c      	cmp	r4, r3
 8002fb6:	bf08      	it	eq
 8002fb8:	68ec      	ldreq	r4, [r5, #12]
 8002fba:	e7e6      	b.n	8002f8a <__swsetup_r+0x1e>
 8002fbc:	0758      	lsls	r0, r3, #29
 8002fbe:	d512      	bpl.n	8002fe6 <__swsetup_r+0x7a>
 8002fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fc2:	b141      	cbz	r1, 8002fd6 <__swsetup_r+0x6a>
 8002fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fc8:	4299      	cmp	r1, r3
 8002fca:	d002      	beq.n	8002fd2 <__swsetup_r+0x66>
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f000 fa5b 	bl	8003488 <_free_r>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	6063      	str	r3, [r4, #4]
 8002fe2:	6923      	ldr	r3, [r4, #16]
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f043 0308 	orr.w	r3, r3, #8
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	6923      	ldr	r3, [r4, #16]
 8002ff0:	b94b      	cbnz	r3, 8003006 <__swsetup_r+0x9a>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffc:	d003      	beq.n	8003006 <__swsetup_r+0x9a>
 8002ffe:	4621      	mov	r1, r4
 8003000:	4630      	mov	r0, r6
 8003002:	f000 fa01 	bl	8003408 <__smakebuf_r>
 8003006:	89a0      	ldrh	r0, [r4, #12]
 8003008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800300c:	f010 0301 	ands.w	r3, r0, #1
 8003010:	d00a      	beq.n	8003028 <__swsetup_r+0xbc>
 8003012:	2300      	movs	r3, #0
 8003014:	60a3      	str	r3, [r4, #8]
 8003016:	6963      	ldr	r3, [r4, #20]
 8003018:	425b      	negs	r3, r3
 800301a:	61a3      	str	r3, [r4, #24]
 800301c:	6923      	ldr	r3, [r4, #16]
 800301e:	b943      	cbnz	r3, 8003032 <__swsetup_r+0xc6>
 8003020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003024:	d1ba      	bne.n	8002f9c <__swsetup_r+0x30>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	0781      	lsls	r1, r0, #30
 800302a:	bf58      	it	pl
 800302c:	6963      	ldrpl	r3, [r4, #20]
 800302e:	60a3      	str	r3, [r4, #8]
 8003030:	e7f4      	b.n	800301c <__swsetup_r+0xb0>
 8003032:	2000      	movs	r0, #0
 8003034:	e7f7      	b.n	8003026 <__swsetup_r+0xba>
 8003036:	bf00      	nop
 8003038:	2000000c 	.word	0x2000000c
 800303c:	080038c0 	.word	0x080038c0
 8003040:	080038e0 	.word	0x080038e0
 8003044:	080038a0 	.word	0x080038a0

08003048 <__sflush_r>:
 8003048:	898a      	ldrh	r2, [r1, #12]
 800304a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800304e:	4605      	mov	r5, r0
 8003050:	0710      	lsls	r0, r2, #28
 8003052:	460c      	mov	r4, r1
 8003054:	d458      	bmi.n	8003108 <__sflush_r+0xc0>
 8003056:	684b      	ldr	r3, [r1, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	dc05      	bgt.n	8003068 <__sflush_r+0x20>
 800305c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	dc02      	bgt.n	8003068 <__sflush_r+0x20>
 8003062:	2000      	movs	r0, #0
 8003064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800306a:	2e00      	cmp	r6, #0
 800306c:	d0f9      	beq.n	8003062 <__sflush_r+0x1a>
 800306e:	2300      	movs	r3, #0
 8003070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003074:	682f      	ldr	r7, [r5, #0]
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	d032      	beq.n	80030e0 <__sflush_r+0x98>
 800307a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	075a      	lsls	r2, r3, #29
 8003080:	d505      	bpl.n	800308e <__sflush_r+0x46>
 8003082:	6863      	ldr	r3, [r4, #4]
 8003084:	1ac0      	subs	r0, r0, r3
 8003086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003088:	b10b      	cbz	r3, 800308e <__sflush_r+0x46>
 800308a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800308c:	1ac0      	subs	r0, r0, r3
 800308e:	2300      	movs	r3, #0
 8003090:	4602      	mov	r2, r0
 8003092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003094:	6a21      	ldr	r1, [r4, #32]
 8003096:	4628      	mov	r0, r5
 8003098:	47b0      	blx	r6
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	d106      	bne.n	80030ae <__sflush_r+0x66>
 80030a0:	6829      	ldr	r1, [r5, #0]
 80030a2:	291d      	cmp	r1, #29
 80030a4:	d82c      	bhi.n	8003100 <__sflush_r+0xb8>
 80030a6:	4a2a      	ldr	r2, [pc, #168]	; (8003150 <__sflush_r+0x108>)
 80030a8:	40ca      	lsrs	r2, r1
 80030aa:	07d6      	lsls	r6, r2, #31
 80030ac:	d528      	bpl.n	8003100 <__sflush_r+0xb8>
 80030ae:	2200      	movs	r2, #0
 80030b0:	6062      	str	r2, [r4, #4]
 80030b2:	04d9      	lsls	r1, r3, #19
 80030b4:	6922      	ldr	r2, [r4, #16]
 80030b6:	6022      	str	r2, [r4, #0]
 80030b8:	d504      	bpl.n	80030c4 <__sflush_r+0x7c>
 80030ba:	1c42      	adds	r2, r0, #1
 80030bc:	d101      	bne.n	80030c2 <__sflush_r+0x7a>
 80030be:	682b      	ldr	r3, [r5, #0]
 80030c0:	b903      	cbnz	r3, 80030c4 <__sflush_r+0x7c>
 80030c2:	6560      	str	r0, [r4, #84]	; 0x54
 80030c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030c6:	602f      	str	r7, [r5, #0]
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d0ca      	beq.n	8003062 <__sflush_r+0x1a>
 80030cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030d0:	4299      	cmp	r1, r3
 80030d2:	d002      	beq.n	80030da <__sflush_r+0x92>
 80030d4:	4628      	mov	r0, r5
 80030d6:	f000 f9d7 	bl	8003488 <_free_r>
 80030da:	2000      	movs	r0, #0
 80030dc:	6360      	str	r0, [r4, #52]	; 0x34
 80030de:	e7c1      	b.n	8003064 <__sflush_r+0x1c>
 80030e0:	6a21      	ldr	r1, [r4, #32]
 80030e2:	2301      	movs	r3, #1
 80030e4:	4628      	mov	r0, r5
 80030e6:	47b0      	blx	r6
 80030e8:	1c41      	adds	r1, r0, #1
 80030ea:	d1c7      	bne.n	800307c <__sflush_r+0x34>
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0c4      	beq.n	800307c <__sflush_r+0x34>
 80030f2:	2b1d      	cmp	r3, #29
 80030f4:	d001      	beq.n	80030fa <__sflush_r+0xb2>
 80030f6:	2b16      	cmp	r3, #22
 80030f8:	d101      	bne.n	80030fe <__sflush_r+0xb6>
 80030fa:	602f      	str	r7, [r5, #0]
 80030fc:	e7b1      	b.n	8003062 <__sflush_r+0x1a>
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	e7ad      	b.n	8003064 <__sflush_r+0x1c>
 8003108:	690f      	ldr	r7, [r1, #16]
 800310a:	2f00      	cmp	r7, #0
 800310c:	d0a9      	beq.n	8003062 <__sflush_r+0x1a>
 800310e:	0793      	lsls	r3, r2, #30
 8003110:	680e      	ldr	r6, [r1, #0]
 8003112:	bf08      	it	eq
 8003114:	694b      	ldreq	r3, [r1, #20]
 8003116:	600f      	str	r7, [r1, #0]
 8003118:	bf18      	it	ne
 800311a:	2300      	movne	r3, #0
 800311c:	eba6 0807 	sub.w	r8, r6, r7
 8003120:	608b      	str	r3, [r1, #8]
 8003122:	f1b8 0f00 	cmp.w	r8, #0
 8003126:	dd9c      	ble.n	8003062 <__sflush_r+0x1a>
 8003128:	6a21      	ldr	r1, [r4, #32]
 800312a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800312c:	4643      	mov	r3, r8
 800312e:	463a      	mov	r2, r7
 8003130:	4628      	mov	r0, r5
 8003132:	47b0      	blx	r6
 8003134:	2800      	cmp	r0, #0
 8003136:	dc06      	bgt.n	8003146 <__sflush_r+0xfe>
 8003138:	89a3      	ldrh	r3, [r4, #12]
 800313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313e:	81a3      	strh	r3, [r4, #12]
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	e78e      	b.n	8003064 <__sflush_r+0x1c>
 8003146:	4407      	add	r7, r0
 8003148:	eba8 0800 	sub.w	r8, r8, r0
 800314c:	e7e9      	b.n	8003122 <__sflush_r+0xda>
 800314e:	bf00      	nop
 8003150:	20400001 	.word	0x20400001

08003154 <_fflush_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	690b      	ldr	r3, [r1, #16]
 8003158:	4605      	mov	r5, r0
 800315a:	460c      	mov	r4, r1
 800315c:	b913      	cbnz	r3, 8003164 <_fflush_r+0x10>
 800315e:	2500      	movs	r5, #0
 8003160:	4628      	mov	r0, r5
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	b118      	cbz	r0, 800316e <_fflush_r+0x1a>
 8003166:	6983      	ldr	r3, [r0, #24]
 8003168:	b90b      	cbnz	r3, 800316e <_fflush_r+0x1a>
 800316a:	f000 f887 	bl	800327c <__sinit>
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <_fflush_r+0x6c>)
 8003170:	429c      	cmp	r4, r3
 8003172:	d11b      	bne.n	80031ac <_fflush_r+0x58>
 8003174:	686c      	ldr	r4, [r5, #4]
 8003176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ef      	beq.n	800315e <_fflush_r+0xa>
 800317e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003180:	07d0      	lsls	r0, r2, #31
 8003182:	d404      	bmi.n	800318e <_fflush_r+0x3a>
 8003184:	0599      	lsls	r1, r3, #22
 8003186:	d402      	bmi.n	800318e <_fflush_r+0x3a>
 8003188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800318a:	f000 f915 	bl	80033b8 <__retarget_lock_acquire_recursive>
 800318e:	4628      	mov	r0, r5
 8003190:	4621      	mov	r1, r4
 8003192:	f7ff ff59 	bl	8003048 <__sflush_r>
 8003196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003198:	07da      	lsls	r2, r3, #31
 800319a:	4605      	mov	r5, r0
 800319c:	d4e0      	bmi.n	8003160 <_fflush_r+0xc>
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	059b      	lsls	r3, r3, #22
 80031a2:	d4dd      	bmi.n	8003160 <_fflush_r+0xc>
 80031a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031a6:	f000 f908 	bl	80033ba <__retarget_lock_release_recursive>
 80031aa:	e7d9      	b.n	8003160 <_fflush_r+0xc>
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <_fflush_r+0x70>)
 80031ae:	429c      	cmp	r4, r3
 80031b0:	d101      	bne.n	80031b6 <_fflush_r+0x62>
 80031b2:	68ac      	ldr	r4, [r5, #8]
 80031b4:	e7df      	b.n	8003176 <_fflush_r+0x22>
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <_fflush_r+0x74>)
 80031b8:	429c      	cmp	r4, r3
 80031ba:	bf08      	it	eq
 80031bc:	68ec      	ldreq	r4, [r5, #12]
 80031be:	e7da      	b.n	8003176 <_fflush_r+0x22>
 80031c0:	080038c0 	.word	0x080038c0
 80031c4:	080038e0 	.word	0x080038e0
 80031c8:	080038a0 	.word	0x080038a0

080031cc <std>:
 80031cc:	2300      	movs	r3, #0
 80031ce:	b510      	push	{r4, lr}
 80031d0:	4604      	mov	r4, r0
 80031d2:	e9c0 3300 	strd	r3, r3, [r0]
 80031d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031da:	6083      	str	r3, [r0, #8]
 80031dc:	8181      	strh	r1, [r0, #12]
 80031de:	6643      	str	r3, [r0, #100]	; 0x64
 80031e0:	81c2      	strh	r2, [r0, #14]
 80031e2:	6183      	str	r3, [r0, #24]
 80031e4:	4619      	mov	r1, r3
 80031e6:	2208      	movs	r2, #8
 80031e8:	305c      	adds	r0, #92	; 0x5c
 80031ea:	f7ff fdef 	bl	8002dcc <memset>
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <std+0x38>)
 80031f0:	6263      	str	r3, [r4, #36]	; 0x24
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <std+0x3c>)
 80031f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <std+0x40>)
 80031f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <std+0x44>)
 80031fc:	6224      	str	r4, [r4, #32]
 80031fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003200:	bd10      	pop	{r4, pc}
 8003202:	bf00      	nop
 8003204:	08003669 	.word	0x08003669
 8003208:	0800368b 	.word	0x0800368b
 800320c:	080036c3 	.word	0x080036c3
 8003210:	080036e7 	.word	0x080036e7

08003214 <_cleanup_r>:
 8003214:	4901      	ldr	r1, [pc, #4]	; (800321c <_cleanup_r+0x8>)
 8003216:	f000 b8af 	b.w	8003378 <_fwalk_reent>
 800321a:	bf00      	nop
 800321c:	08003155 	.word	0x08003155

08003220 <__sfmoreglue>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	2268      	movs	r2, #104	; 0x68
 8003224:	1e4d      	subs	r5, r1, #1
 8003226:	4355      	muls	r5, r2
 8003228:	460e      	mov	r6, r1
 800322a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800322e:	f000 f997 	bl	8003560 <_malloc_r>
 8003232:	4604      	mov	r4, r0
 8003234:	b140      	cbz	r0, 8003248 <__sfmoreglue+0x28>
 8003236:	2100      	movs	r1, #0
 8003238:	e9c0 1600 	strd	r1, r6, [r0]
 800323c:	300c      	adds	r0, #12
 800323e:	60a0      	str	r0, [r4, #8]
 8003240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003244:	f7ff fdc2 	bl	8002dcc <memset>
 8003248:	4620      	mov	r0, r4
 800324a:	bd70      	pop	{r4, r5, r6, pc}

0800324c <__sfp_lock_acquire>:
 800324c:	4801      	ldr	r0, [pc, #4]	; (8003254 <__sfp_lock_acquire+0x8>)
 800324e:	f000 b8b3 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 8003252:	bf00      	nop
 8003254:	200002e9 	.word	0x200002e9

08003258 <__sfp_lock_release>:
 8003258:	4801      	ldr	r0, [pc, #4]	; (8003260 <__sfp_lock_release+0x8>)
 800325a:	f000 b8ae 	b.w	80033ba <__retarget_lock_release_recursive>
 800325e:	bf00      	nop
 8003260:	200002e9 	.word	0x200002e9

08003264 <__sinit_lock_acquire>:
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <__sinit_lock_acquire+0x8>)
 8003266:	f000 b8a7 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 800326a:	bf00      	nop
 800326c:	200002ea 	.word	0x200002ea

08003270 <__sinit_lock_release>:
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <__sinit_lock_release+0x8>)
 8003272:	f000 b8a2 	b.w	80033ba <__retarget_lock_release_recursive>
 8003276:	bf00      	nop
 8003278:	200002ea 	.word	0x200002ea

0800327c <__sinit>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
 8003280:	f7ff fff0 	bl	8003264 <__sinit_lock_acquire>
 8003284:	69a3      	ldr	r3, [r4, #24]
 8003286:	b11b      	cbz	r3, 8003290 <__sinit+0x14>
 8003288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800328c:	f7ff bff0 	b.w	8003270 <__sinit_lock_release>
 8003290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003294:	6523      	str	r3, [r4, #80]	; 0x50
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <__sinit+0x68>)
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <__sinit+0x6c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	62a2      	str	r2, [r4, #40]	; 0x28
 800329e:	42a3      	cmp	r3, r4
 80032a0:	bf04      	itt	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	61a3      	streq	r3, [r4, #24]
 80032a6:	4620      	mov	r0, r4
 80032a8:	f000 f820 	bl	80032ec <__sfp>
 80032ac:	6060      	str	r0, [r4, #4]
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f81c 	bl	80032ec <__sfp>
 80032b4:	60a0      	str	r0, [r4, #8]
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 f818 	bl	80032ec <__sfp>
 80032bc:	2200      	movs	r2, #0
 80032be:	60e0      	str	r0, [r4, #12]
 80032c0:	2104      	movs	r1, #4
 80032c2:	6860      	ldr	r0, [r4, #4]
 80032c4:	f7ff ff82 	bl	80031cc <std>
 80032c8:	68a0      	ldr	r0, [r4, #8]
 80032ca:	2201      	movs	r2, #1
 80032cc:	2109      	movs	r1, #9
 80032ce:	f7ff ff7d 	bl	80031cc <std>
 80032d2:	68e0      	ldr	r0, [r4, #12]
 80032d4:	2202      	movs	r2, #2
 80032d6:	2112      	movs	r1, #18
 80032d8:	f7ff ff78 	bl	80031cc <std>
 80032dc:	2301      	movs	r3, #1
 80032de:	61a3      	str	r3, [r4, #24]
 80032e0:	e7d2      	b.n	8003288 <__sinit+0xc>
 80032e2:	bf00      	nop
 80032e4:	0800389c 	.word	0x0800389c
 80032e8:	08003215 	.word	0x08003215

080032ec <__sfp>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	4607      	mov	r7, r0
 80032f0:	f7ff ffac 	bl	800324c <__sfp_lock_acquire>
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <__sfp+0x84>)
 80032f6:	681e      	ldr	r6, [r3, #0]
 80032f8:	69b3      	ldr	r3, [r6, #24]
 80032fa:	b913      	cbnz	r3, 8003302 <__sfp+0x16>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f7ff ffbd 	bl	800327c <__sinit>
 8003302:	3648      	adds	r6, #72	; 0x48
 8003304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	d503      	bpl.n	8003314 <__sfp+0x28>
 800330c:	6833      	ldr	r3, [r6, #0]
 800330e:	b30b      	cbz	r3, 8003354 <__sfp+0x68>
 8003310:	6836      	ldr	r6, [r6, #0]
 8003312:	e7f7      	b.n	8003304 <__sfp+0x18>
 8003314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003318:	b9d5      	cbnz	r5, 8003350 <__sfp+0x64>
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <__sfp+0x88>)
 800331c:	60e3      	str	r3, [r4, #12]
 800331e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003322:	6665      	str	r5, [r4, #100]	; 0x64
 8003324:	f000 f847 	bl	80033b6 <__retarget_lock_init_recursive>
 8003328:	f7ff ff96 	bl	8003258 <__sfp_lock_release>
 800332c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003334:	6025      	str	r5, [r4, #0]
 8003336:	61a5      	str	r5, [r4, #24]
 8003338:	2208      	movs	r2, #8
 800333a:	4629      	mov	r1, r5
 800333c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003340:	f7ff fd44 	bl	8002dcc <memset>
 8003344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800334c:	4620      	mov	r0, r4
 800334e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003350:	3468      	adds	r4, #104	; 0x68
 8003352:	e7d9      	b.n	8003308 <__sfp+0x1c>
 8003354:	2104      	movs	r1, #4
 8003356:	4638      	mov	r0, r7
 8003358:	f7ff ff62 	bl	8003220 <__sfmoreglue>
 800335c:	4604      	mov	r4, r0
 800335e:	6030      	str	r0, [r6, #0]
 8003360:	2800      	cmp	r0, #0
 8003362:	d1d5      	bne.n	8003310 <__sfp+0x24>
 8003364:	f7ff ff78 	bl	8003258 <__sfp_lock_release>
 8003368:	230c      	movs	r3, #12
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	e7ee      	b.n	800334c <__sfp+0x60>
 800336e:	bf00      	nop
 8003370:	0800389c 	.word	0x0800389c
 8003374:	ffff0001 	.word	0xffff0001

08003378 <_fwalk_reent>:
 8003378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800337c:	4606      	mov	r6, r0
 800337e:	4688      	mov	r8, r1
 8003380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003384:	2700      	movs	r7, #0
 8003386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800338a:	f1b9 0901 	subs.w	r9, r9, #1
 800338e:	d505      	bpl.n	800339c <_fwalk_reent+0x24>
 8003390:	6824      	ldr	r4, [r4, #0]
 8003392:	2c00      	cmp	r4, #0
 8003394:	d1f7      	bne.n	8003386 <_fwalk_reent+0xe>
 8003396:	4638      	mov	r0, r7
 8003398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800339c:	89ab      	ldrh	r3, [r5, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d907      	bls.n	80033b2 <_fwalk_reent+0x3a>
 80033a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033a6:	3301      	adds	r3, #1
 80033a8:	d003      	beq.n	80033b2 <_fwalk_reent+0x3a>
 80033aa:	4629      	mov	r1, r5
 80033ac:	4630      	mov	r0, r6
 80033ae:	47c0      	blx	r8
 80033b0:	4307      	orrs	r7, r0
 80033b2:	3568      	adds	r5, #104	; 0x68
 80033b4:	e7e9      	b.n	800338a <_fwalk_reent+0x12>

080033b6 <__retarget_lock_init_recursive>:
 80033b6:	4770      	bx	lr

080033b8 <__retarget_lock_acquire_recursive>:
 80033b8:	4770      	bx	lr

080033ba <__retarget_lock_release_recursive>:
 80033ba:	4770      	bx	lr

080033bc <__swhatbuf_r>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	460e      	mov	r6, r1
 80033c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033c4:	2900      	cmp	r1, #0
 80033c6:	b096      	sub	sp, #88	; 0x58
 80033c8:	4614      	mov	r4, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	da08      	bge.n	80033e0 <__swhatbuf_r+0x24>
 80033ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	602a      	str	r2, [r5, #0]
 80033d6:	061a      	lsls	r2, r3, #24
 80033d8:	d410      	bmi.n	80033fc <__swhatbuf_r+0x40>
 80033da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033de:	e00e      	b.n	80033fe <__swhatbuf_r+0x42>
 80033e0:	466a      	mov	r2, sp
 80033e2:	f000 f9a7 	bl	8003734 <_fstat_r>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	dbf1      	blt.n	80033ce <__swhatbuf_r+0x12>
 80033ea:	9a01      	ldr	r2, [sp, #4]
 80033ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033f4:	425a      	negs	r2, r3
 80033f6:	415a      	adcs	r2, r3
 80033f8:	602a      	str	r2, [r5, #0]
 80033fa:	e7ee      	b.n	80033da <__swhatbuf_r+0x1e>
 80033fc:	2340      	movs	r3, #64	; 0x40
 80033fe:	2000      	movs	r0, #0
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	b016      	add	sp, #88	; 0x58
 8003404:	bd70      	pop	{r4, r5, r6, pc}
	...

08003408 <__smakebuf_r>:
 8003408:	898b      	ldrh	r3, [r1, #12]
 800340a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800340c:	079d      	lsls	r5, r3, #30
 800340e:	4606      	mov	r6, r0
 8003410:	460c      	mov	r4, r1
 8003412:	d507      	bpl.n	8003424 <__smakebuf_r+0x1c>
 8003414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	6123      	str	r3, [r4, #16]
 800341c:	2301      	movs	r3, #1
 800341e:	6163      	str	r3, [r4, #20]
 8003420:	b002      	add	sp, #8
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	ab01      	add	r3, sp, #4
 8003426:	466a      	mov	r2, sp
 8003428:	f7ff ffc8 	bl	80033bc <__swhatbuf_r>
 800342c:	9900      	ldr	r1, [sp, #0]
 800342e:	4605      	mov	r5, r0
 8003430:	4630      	mov	r0, r6
 8003432:	f000 f895 	bl	8003560 <_malloc_r>
 8003436:	b948      	cbnz	r0, 800344c <__smakebuf_r+0x44>
 8003438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800343c:	059a      	lsls	r2, r3, #22
 800343e:	d4ef      	bmi.n	8003420 <__smakebuf_r+0x18>
 8003440:	f023 0303 	bic.w	r3, r3, #3
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	e7e3      	b.n	8003414 <__smakebuf_r+0xc>
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <__smakebuf_r+0x7c>)
 800344e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003450:	89a3      	ldrh	r3, [r4, #12]
 8003452:	6020      	str	r0, [r4, #0]
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	81a3      	strh	r3, [r4, #12]
 800345a:	9b00      	ldr	r3, [sp, #0]
 800345c:	6163      	str	r3, [r4, #20]
 800345e:	9b01      	ldr	r3, [sp, #4]
 8003460:	6120      	str	r0, [r4, #16]
 8003462:	b15b      	cbz	r3, 800347c <__smakebuf_r+0x74>
 8003464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003468:	4630      	mov	r0, r6
 800346a:	f000 f975 	bl	8003758 <_isatty_r>
 800346e:	b128      	cbz	r0, 800347c <__smakebuf_r+0x74>
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	81a3      	strh	r3, [r4, #12]
 800347c:	89a0      	ldrh	r0, [r4, #12]
 800347e:	4305      	orrs	r5, r0
 8003480:	81a5      	strh	r5, [r4, #12]
 8003482:	e7cd      	b.n	8003420 <__smakebuf_r+0x18>
 8003484:	08003215 	.word	0x08003215

08003488 <_free_r>:
 8003488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800348a:	2900      	cmp	r1, #0
 800348c:	d044      	beq.n	8003518 <_free_r+0x90>
 800348e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003492:	9001      	str	r0, [sp, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f1a1 0404 	sub.w	r4, r1, #4
 800349a:	bfb8      	it	lt
 800349c:	18e4      	addlt	r4, r4, r3
 800349e:	f000 f97d 	bl	800379c <__malloc_lock>
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <_free_r+0x94>)
 80034a4:	9801      	ldr	r0, [sp, #4]
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	b933      	cbnz	r3, 80034b8 <_free_r+0x30>
 80034aa:	6063      	str	r3, [r4, #4]
 80034ac:	6014      	str	r4, [r2, #0]
 80034ae:	b003      	add	sp, #12
 80034b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034b4:	f000 b978 	b.w	80037a8 <__malloc_unlock>
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	d908      	bls.n	80034ce <_free_r+0x46>
 80034bc:	6825      	ldr	r5, [r4, #0]
 80034be:	1961      	adds	r1, r4, r5
 80034c0:	428b      	cmp	r3, r1
 80034c2:	bf01      	itttt	eq
 80034c4:	6819      	ldreq	r1, [r3, #0]
 80034c6:	685b      	ldreq	r3, [r3, #4]
 80034c8:	1949      	addeq	r1, r1, r5
 80034ca:	6021      	streq	r1, [r4, #0]
 80034cc:	e7ed      	b.n	80034aa <_free_r+0x22>
 80034ce:	461a      	mov	r2, r3
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	b10b      	cbz	r3, 80034d8 <_free_r+0x50>
 80034d4:	42a3      	cmp	r3, r4
 80034d6:	d9fa      	bls.n	80034ce <_free_r+0x46>
 80034d8:	6811      	ldr	r1, [r2, #0]
 80034da:	1855      	adds	r5, r2, r1
 80034dc:	42a5      	cmp	r5, r4
 80034de:	d10b      	bne.n	80034f8 <_free_r+0x70>
 80034e0:	6824      	ldr	r4, [r4, #0]
 80034e2:	4421      	add	r1, r4
 80034e4:	1854      	adds	r4, r2, r1
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	6011      	str	r1, [r2, #0]
 80034ea:	d1e0      	bne.n	80034ae <_free_r+0x26>
 80034ec:	681c      	ldr	r4, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	6053      	str	r3, [r2, #4]
 80034f2:	4421      	add	r1, r4
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	e7da      	b.n	80034ae <_free_r+0x26>
 80034f8:	d902      	bls.n	8003500 <_free_r+0x78>
 80034fa:	230c      	movs	r3, #12
 80034fc:	6003      	str	r3, [r0, #0]
 80034fe:	e7d6      	b.n	80034ae <_free_r+0x26>
 8003500:	6825      	ldr	r5, [r4, #0]
 8003502:	1961      	adds	r1, r4, r5
 8003504:	428b      	cmp	r3, r1
 8003506:	bf04      	itt	eq
 8003508:	6819      	ldreq	r1, [r3, #0]
 800350a:	685b      	ldreq	r3, [r3, #4]
 800350c:	6063      	str	r3, [r4, #4]
 800350e:	bf04      	itt	eq
 8003510:	1949      	addeq	r1, r1, r5
 8003512:	6021      	streq	r1, [r4, #0]
 8003514:	6054      	str	r4, [r2, #4]
 8003516:	e7ca      	b.n	80034ae <_free_r+0x26>
 8003518:	b003      	add	sp, #12
 800351a:	bd30      	pop	{r4, r5, pc}
 800351c:	200002ec 	.word	0x200002ec

08003520 <sbrk_aligned>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4e0e      	ldr	r6, [pc, #56]	; (800355c <sbrk_aligned+0x3c>)
 8003524:	460c      	mov	r4, r1
 8003526:	6831      	ldr	r1, [r6, #0]
 8003528:	4605      	mov	r5, r0
 800352a:	b911      	cbnz	r1, 8003532 <sbrk_aligned+0x12>
 800352c:	f000 f88c 	bl	8003648 <_sbrk_r>
 8003530:	6030      	str	r0, [r6, #0]
 8003532:	4621      	mov	r1, r4
 8003534:	4628      	mov	r0, r5
 8003536:	f000 f887 	bl	8003648 <_sbrk_r>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	d00a      	beq.n	8003554 <sbrk_aligned+0x34>
 800353e:	1cc4      	adds	r4, r0, #3
 8003540:	f024 0403 	bic.w	r4, r4, #3
 8003544:	42a0      	cmp	r0, r4
 8003546:	d007      	beq.n	8003558 <sbrk_aligned+0x38>
 8003548:	1a21      	subs	r1, r4, r0
 800354a:	4628      	mov	r0, r5
 800354c:	f000 f87c 	bl	8003648 <_sbrk_r>
 8003550:	3001      	adds	r0, #1
 8003552:	d101      	bne.n	8003558 <sbrk_aligned+0x38>
 8003554:	f04f 34ff 	mov.w	r4, #4294967295
 8003558:	4620      	mov	r0, r4
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	200002f0 	.word	0x200002f0

08003560 <_malloc_r>:
 8003560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003564:	1ccd      	adds	r5, r1, #3
 8003566:	f025 0503 	bic.w	r5, r5, #3
 800356a:	3508      	adds	r5, #8
 800356c:	2d0c      	cmp	r5, #12
 800356e:	bf38      	it	cc
 8003570:	250c      	movcc	r5, #12
 8003572:	2d00      	cmp	r5, #0
 8003574:	4607      	mov	r7, r0
 8003576:	db01      	blt.n	800357c <_malloc_r+0x1c>
 8003578:	42a9      	cmp	r1, r5
 800357a:	d905      	bls.n	8003588 <_malloc_r+0x28>
 800357c:	230c      	movs	r3, #12
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	2600      	movs	r6, #0
 8003582:	4630      	mov	r0, r6
 8003584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003588:	4e2e      	ldr	r6, [pc, #184]	; (8003644 <_malloc_r+0xe4>)
 800358a:	f000 f907 	bl	800379c <__malloc_lock>
 800358e:	6833      	ldr	r3, [r6, #0]
 8003590:	461c      	mov	r4, r3
 8003592:	bb34      	cbnz	r4, 80035e2 <_malloc_r+0x82>
 8003594:	4629      	mov	r1, r5
 8003596:	4638      	mov	r0, r7
 8003598:	f7ff ffc2 	bl	8003520 <sbrk_aligned>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	4604      	mov	r4, r0
 80035a0:	d14d      	bne.n	800363e <_malloc_r+0xde>
 80035a2:	6834      	ldr	r4, [r6, #0]
 80035a4:	4626      	mov	r6, r4
 80035a6:	2e00      	cmp	r6, #0
 80035a8:	d140      	bne.n	800362c <_malloc_r+0xcc>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	4631      	mov	r1, r6
 80035ae:	4638      	mov	r0, r7
 80035b0:	eb04 0803 	add.w	r8, r4, r3
 80035b4:	f000 f848 	bl	8003648 <_sbrk_r>
 80035b8:	4580      	cmp	r8, r0
 80035ba:	d13a      	bne.n	8003632 <_malloc_r+0xd2>
 80035bc:	6821      	ldr	r1, [r4, #0]
 80035be:	3503      	adds	r5, #3
 80035c0:	1a6d      	subs	r5, r5, r1
 80035c2:	f025 0503 	bic.w	r5, r5, #3
 80035c6:	3508      	adds	r5, #8
 80035c8:	2d0c      	cmp	r5, #12
 80035ca:	bf38      	it	cc
 80035cc:	250c      	movcc	r5, #12
 80035ce:	4629      	mov	r1, r5
 80035d0:	4638      	mov	r0, r7
 80035d2:	f7ff ffa5 	bl	8003520 <sbrk_aligned>
 80035d6:	3001      	adds	r0, #1
 80035d8:	d02b      	beq.n	8003632 <_malloc_r+0xd2>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	442b      	add	r3, r5
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	e00e      	b.n	8003600 <_malloc_r+0xa0>
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	1b52      	subs	r2, r2, r5
 80035e6:	d41e      	bmi.n	8003626 <_malloc_r+0xc6>
 80035e8:	2a0b      	cmp	r2, #11
 80035ea:	d916      	bls.n	800361a <_malloc_r+0xba>
 80035ec:	1961      	adds	r1, r4, r5
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	6025      	str	r5, [r4, #0]
 80035f2:	bf18      	it	ne
 80035f4:	6059      	strne	r1, [r3, #4]
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	bf08      	it	eq
 80035fa:	6031      	streq	r1, [r6, #0]
 80035fc:	5162      	str	r2, [r4, r5]
 80035fe:	604b      	str	r3, [r1, #4]
 8003600:	4638      	mov	r0, r7
 8003602:	f104 060b 	add.w	r6, r4, #11
 8003606:	f000 f8cf 	bl	80037a8 <__malloc_unlock>
 800360a:	f026 0607 	bic.w	r6, r6, #7
 800360e:	1d23      	adds	r3, r4, #4
 8003610:	1af2      	subs	r2, r6, r3
 8003612:	d0b6      	beq.n	8003582 <_malloc_r+0x22>
 8003614:	1b9b      	subs	r3, r3, r6
 8003616:	50a3      	str	r3, [r4, r2]
 8003618:	e7b3      	b.n	8003582 <_malloc_r+0x22>
 800361a:	6862      	ldr	r2, [r4, #4]
 800361c:	42a3      	cmp	r3, r4
 800361e:	bf0c      	ite	eq
 8003620:	6032      	streq	r2, [r6, #0]
 8003622:	605a      	strne	r2, [r3, #4]
 8003624:	e7ec      	b.n	8003600 <_malloc_r+0xa0>
 8003626:	4623      	mov	r3, r4
 8003628:	6864      	ldr	r4, [r4, #4]
 800362a:	e7b2      	b.n	8003592 <_malloc_r+0x32>
 800362c:	4634      	mov	r4, r6
 800362e:	6876      	ldr	r6, [r6, #4]
 8003630:	e7b9      	b.n	80035a6 <_malloc_r+0x46>
 8003632:	230c      	movs	r3, #12
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4638      	mov	r0, r7
 8003638:	f000 f8b6 	bl	80037a8 <__malloc_unlock>
 800363c:	e7a1      	b.n	8003582 <_malloc_r+0x22>
 800363e:	6025      	str	r5, [r4, #0]
 8003640:	e7de      	b.n	8003600 <_malloc_r+0xa0>
 8003642:	bf00      	nop
 8003644:	200002ec 	.word	0x200002ec

08003648 <_sbrk_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4d06      	ldr	r5, [pc, #24]	; (8003664 <_sbrk_r+0x1c>)
 800364c:	2300      	movs	r3, #0
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1
 8003652:	602b      	str	r3, [r5, #0]
 8003654:	f7fd feb2 	bl	80013bc <_sbrk>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d102      	bne.n	8003662 <_sbrk_r+0x1a>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	b103      	cbz	r3, 8003662 <_sbrk_r+0x1a>
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	bd38      	pop	{r3, r4, r5, pc}
 8003664:	200002f4 	.word	0x200002f4

08003668 <__sread>:
 8003668:	b510      	push	{r4, lr}
 800366a:	460c      	mov	r4, r1
 800366c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003670:	f000 f8a0 	bl	80037b4 <_read_r>
 8003674:	2800      	cmp	r0, #0
 8003676:	bfab      	itete	ge
 8003678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800367a:	89a3      	ldrhlt	r3, [r4, #12]
 800367c:	181b      	addge	r3, r3, r0
 800367e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003682:	bfac      	ite	ge
 8003684:	6563      	strge	r3, [r4, #84]	; 0x54
 8003686:	81a3      	strhlt	r3, [r4, #12]
 8003688:	bd10      	pop	{r4, pc}

0800368a <__swrite>:
 800368a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800368e:	461f      	mov	r7, r3
 8003690:	898b      	ldrh	r3, [r1, #12]
 8003692:	05db      	lsls	r3, r3, #23
 8003694:	4605      	mov	r5, r0
 8003696:	460c      	mov	r4, r1
 8003698:	4616      	mov	r6, r2
 800369a:	d505      	bpl.n	80036a8 <__swrite+0x1e>
 800369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a0:	2302      	movs	r3, #2
 80036a2:	2200      	movs	r2, #0
 80036a4:	f000 f868 	bl	8003778 <_lseek_r>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	4632      	mov	r2, r6
 80036b6:	463b      	mov	r3, r7
 80036b8:	4628      	mov	r0, r5
 80036ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036be:	f000 b817 	b.w	80036f0 <_write_r>

080036c2 <__sseek>:
 80036c2:	b510      	push	{r4, lr}
 80036c4:	460c      	mov	r4, r1
 80036c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ca:	f000 f855 	bl	8003778 <_lseek_r>
 80036ce:	1c43      	adds	r3, r0, #1
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	bf15      	itete	ne
 80036d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80036d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036de:	81a3      	strheq	r3, [r4, #12]
 80036e0:	bf18      	it	ne
 80036e2:	81a3      	strhne	r3, [r4, #12]
 80036e4:	bd10      	pop	{r4, pc}

080036e6 <__sclose>:
 80036e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ea:	f000 b813 	b.w	8003714 <_close_r>
	...

080036f0 <_write_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4d07      	ldr	r5, [pc, #28]	; (8003710 <_write_r+0x20>)
 80036f4:	4604      	mov	r4, r0
 80036f6:	4608      	mov	r0, r1
 80036f8:	4611      	mov	r1, r2
 80036fa:	2200      	movs	r2, #0
 80036fc:	602a      	str	r2, [r5, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	f7fd fe0b 	bl	800131a <_write>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d102      	bne.n	800370e <_write_r+0x1e>
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	b103      	cbz	r3, 800370e <_write_r+0x1e>
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	200002f4 	.word	0x200002f4

08003714 <_close_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4d06      	ldr	r5, [pc, #24]	; (8003730 <_close_r+0x1c>)
 8003718:	2300      	movs	r3, #0
 800371a:	4604      	mov	r4, r0
 800371c:	4608      	mov	r0, r1
 800371e:	602b      	str	r3, [r5, #0]
 8003720:	f7fd fe17 	bl	8001352 <_close>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d102      	bne.n	800372e <_close_r+0x1a>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	b103      	cbz	r3, 800372e <_close_r+0x1a>
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	200002f4 	.word	0x200002f4

08003734 <_fstat_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4d07      	ldr	r5, [pc, #28]	; (8003754 <_fstat_r+0x20>)
 8003738:	2300      	movs	r3, #0
 800373a:	4604      	mov	r4, r0
 800373c:	4608      	mov	r0, r1
 800373e:	4611      	mov	r1, r2
 8003740:	602b      	str	r3, [r5, #0]
 8003742:	f7fd fe12 	bl	800136a <_fstat>
 8003746:	1c43      	adds	r3, r0, #1
 8003748:	d102      	bne.n	8003750 <_fstat_r+0x1c>
 800374a:	682b      	ldr	r3, [r5, #0]
 800374c:	b103      	cbz	r3, 8003750 <_fstat_r+0x1c>
 800374e:	6023      	str	r3, [r4, #0]
 8003750:	bd38      	pop	{r3, r4, r5, pc}
 8003752:	bf00      	nop
 8003754:	200002f4 	.word	0x200002f4

08003758 <_isatty_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4d06      	ldr	r5, [pc, #24]	; (8003774 <_isatty_r+0x1c>)
 800375c:	2300      	movs	r3, #0
 800375e:	4604      	mov	r4, r0
 8003760:	4608      	mov	r0, r1
 8003762:	602b      	str	r3, [r5, #0]
 8003764:	f7fd fe11 	bl	800138a <_isatty>
 8003768:	1c43      	adds	r3, r0, #1
 800376a:	d102      	bne.n	8003772 <_isatty_r+0x1a>
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	b103      	cbz	r3, 8003772 <_isatty_r+0x1a>
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	bd38      	pop	{r3, r4, r5, pc}
 8003774:	200002f4 	.word	0x200002f4

08003778 <_lseek_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4d07      	ldr	r5, [pc, #28]	; (8003798 <_lseek_r+0x20>)
 800377c:	4604      	mov	r4, r0
 800377e:	4608      	mov	r0, r1
 8003780:	4611      	mov	r1, r2
 8003782:	2200      	movs	r2, #0
 8003784:	602a      	str	r2, [r5, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	f7fd fe0a 	bl	80013a0 <_lseek>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_lseek_r+0x1e>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	b103      	cbz	r3, 8003796 <_lseek_r+0x1e>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	200002f4 	.word	0x200002f4

0800379c <__malloc_lock>:
 800379c:	4801      	ldr	r0, [pc, #4]	; (80037a4 <__malloc_lock+0x8>)
 800379e:	f7ff be0b 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 80037a2:	bf00      	nop
 80037a4:	200002e8 	.word	0x200002e8

080037a8 <__malloc_unlock>:
 80037a8:	4801      	ldr	r0, [pc, #4]	; (80037b0 <__malloc_unlock+0x8>)
 80037aa:	f7ff be06 	b.w	80033ba <__retarget_lock_release_recursive>
 80037ae:	bf00      	nop
 80037b0:	200002e8 	.word	0x200002e8

080037b4 <_read_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4d07      	ldr	r5, [pc, #28]	; (80037d4 <_read_r+0x20>)
 80037b8:	4604      	mov	r4, r0
 80037ba:	4608      	mov	r0, r1
 80037bc:	4611      	mov	r1, r2
 80037be:	2200      	movs	r2, #0
 80037c0:	602a      	str	r2, [r5, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f7fd fd8c 	bl	80012e0 <_read>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d102      	bne.n	80037d2 <_read_r+0x1e>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <_read_r+0x1e>
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	200002f4 	.word	0x200002f4

080037d8 <_init>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr

080037e4 <_fini>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr
